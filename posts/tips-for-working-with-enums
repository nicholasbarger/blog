{"id":"tips-for-working-with-enums","title":"Tips For Working With Enums","description":"","link":"http://nicholasbarger.com/2011/02/21/tips-for-working-with-enums/","pubDate":"2011-02-21T20:11:32.000Z","content":"<p>If you use enums frequently throughout code, you may be interested in the following code snippets.  The first, is a fairly common extension method I’ve seen for getting descriptions from enum values (this is not my code and unfortunately, I can only site Google as the source).</p><div class=\"c_block\"><pre>/// &lt;summary&gt;/// A collection of extension methods for enums./// &lt;/summary&gt;/// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;internal static class Enum&lt;T&gt;{/// &lt;summary&gt;/// An extension method for enums to get the textual description of a specified enum value./// &lt;/summary&gt;/// &lt;param name=\"value\"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;internal static string GetDescription(T value){\tvar da = (DescriptionAttribute[])(typeof(T).GetField(value.ToString()).GetCustomAttributes(typeof(DescriptionAttribute), false));\treturn da.Length &gt; 0 ? da[0].Description : value.ToString();}/// &lt;summary&gt;/// An extension method for enums to get the enum by textual description./// &lt;/summary&gt;/// &lt;param name=\"value\"&gt;&lt;/param&gt;/// &lt;param name=\"description\"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;internal static string GetEnumName(Type value, string description){\tFieldInfo[] fis = value.GetFields();\tforeach (FieldInfo fi in fis)\t{\t\tDescriptionAttribute[] attributes =\t\t  (DescriptionAttribute[])fi.GetCustomAttributes\t\t  (typeof(DescriptionAttribute), false);\t\tif (attributes.Length &gt; 0)\t\t{\t\t\tif (attributes[0].Description == description)\t\t\t{\t\t\t\treturn fi.Name;\t\t\t}\t\t}\t}\treturn description;}}</pre></div><h2>Samples</h2><p>Let’s begin by setting up a very basic enum called MyEnum.  Don’t forget to add <i>using System.ComponentModel;</i> to your using statements.</p><div class=\"c_block\"><pre>public enum MyEnum{[Description(\"Red\")]Red = 1,[Description(\"Blue\")]Blue = 2,[Description(\"Green\")]Green = 3}</pre></div><p>For the examples, I have created a small console app with the following Main() method:</p><div class=\"c_block\"><pre>static void Main(string[] args){//Setup enum valuevar enumVal = MyEnum.Blue;//TODO: Get enum description//TODO: Get enum integer//TODO: Parse enum from string}</pre></div><h3>Get Enum Description</h3><p>Next, let’s demonstrate how to retrieve the string description associated with the enum value using our new enum extension method.</p><div class=\"c_block\"><pre>//Get enum descriptionConsole.WriteLine(\"Test getting description text from enum\");string enumText = Enum.GetDescription(MyEnum.Blue);Console.WriteLine(enumText);Console.ReadKey();</pre></div><p>By running the console application, you should get “Blue”.</p><h3>Get Enum Integer</h3><p>Next, let’s simply get the integer value associated with the blue enum.</p><div class=\"c_block\"><pre>//Get enum integerConsole.WriteLine(\"Test getting integer from enum\");int enumInt = (int)enumVal;Console.WriteLine(enumInt);Console.ReadKey();</pre></div><p>After running the console for getting enum integer, you should get “2”.</p><h3>Parse Enum from String</h3><p>Finally, let’s get an enum value from a matching string representation.  This is actually a parse of string to enum.  As a sidenote, if anyone knows of a cleaner way to do this please leave a comment.  I’ve never been happy with how wordy and casting this is.</p><div class=\"c_block\"><pre>//Parse enum from stringstring enumString = \"Red\";var enumFromString = (MyEnum)Enum.Parse(typeof(MyEnum), enumString);Console.WriteLine(enumFromString);Console.ReadKey();</pre></div><br /><br />"}