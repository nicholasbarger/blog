{"id":"triple-des-encryption-class","title":"Triple DES Encryption Class","description":"","link":"http://nicholasbarger.com/2008/10/21/triple-des-encryption-class/","pubDate":"2008-10-21T18:29:29.000Z","content":"<p>This is a useful encyption class written by Paul Hayman to get started with TripleDES.</p><h2>Class written in C#</h2><div class=\"c_block\"><pre>using System;using System.Collections.Generic;using System.Text;using System.Security.Cryptography;using System.IO;namespace Security{    /// &lt;summary&gt;    /// Wrapper class for Triple Des encryption    /// &lt;/summary&gt;    /// &lt;remarks&gt;    /// Author : Paul Hayman    /// Date : Feb 2006    /// info@PaulHayman.com    /// &lt;/remarks&gt;    public class Encryption    {        private TripleDESCryptoServiceProvider des = new TripleDESCryptoServiceProvider();        private UTF8Encoding utf8 = new UTF8Encoding();        private byte[] keyValue;        private byte[] iVValue;        /// &lt;summary&gt;        /// Key to use during encryption and decryption        /// &lt;/summary&gt;        /// &lt;remarks&gt;        /// &lt;example&gt;        /// byte[] key = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 };        /// &lt;/example&gt;        /// &lt;/remarks&gt;        public byte[] Key        {            get { return keyValue; }            set { keyValue = value; }        }        /// &lt;summary&gt;        /// Initialization vetor to use during encryption and decryption        /// &lt;/summary&gt;        /// &lt;remarks&gt;        /// &lt;example&gt;        /// byte[] iv = { 8, 7, 6, 5, 4, 3, 2, 1 };        /// &lt;/example&gt;        /// &lt;/remarks&gt;        public byte[] iV        {            get { return iVValue; }            set { iVValue = value; }        }        /// &lt;summary&gt;        /// Constructor, allows the key and initialization vetor to be provided        /// &lt;/summary&gt;        /// &lt;param name=\"key\"&gt;&lt;see cref=\"Key\"/&gt;&lt;/param&gt;        /// &lt;param name=\"iV\"&gt;&lt;see cref=\"iV\"/&gt;&lt;/param&gt;        public Encryption(byte[] key, byte[] iV)        {            this.keyValue = key;            this.iVValue = iV;        }        /// &lt;summary&gt;        /// Decrypt bytes        /// &lt;/summary&gt;        /// &lt;param name=\"bytes\"&gt;&lt;/param&gt;        /// &lt;returns&gt;Decrypted data as bytes&lt;/returns&gt;        public byte[] Decrypt(byte[] bytes)        {            return Transform(bytes, des.CreateDecryptor(this.keyValue, this.iVValue));        }        /// &lt;summary&gt;        /// Encrypt bytes        /// &lt;/summary&gt;        /// &lt;param name=\"bytes\"&gt;&lt;/param&gt;        /// &lt;returns&gt;Encrypted data as bytes&lt;/returns&gt;        public byte[] Encrypt(byte[] bytes)        {            return Transform(bytes, des.CreateEncryptor(this.keyValue, this.iVValue));        }        /// &lt;summary&gt;        /// Decrypt a string        /// &lt;/summary&gt;        /// &lt;param name=\"text\"&gt;&lt;/param&gt;        /// &lt;returns&gt;Decrypted data as string&lt;/returns&gt;        public string Decrypt(string text)        {            byte[] input = Convert.FromBase64String(text);            byte[] output = Transform(input, des.CreateDecryptor(this.keyValue, this.iVValue));            return utf8.GetString(output);        }        /// &lt;summary&gt;        /// Encrypt a string        /// &lt;/summary&gt;        /// &lt;param name=\"text\"&gt;&lt;/param&gt;        /// &lt;returns&gt;Encrypted data as string&lt;/returns&gt;        public string Encrypt(string text)        {            byte[] input = utf8.GetBytes(text);            byte[] output = Transform(input, des.CreateEncryptor(this.keyValue, this.iVValue));            return Convert.ToBase64String(output);        }        /// &lt;summary&gt;        /// Encrypt or Decrypt bytes.        /// &lt;/summary&gt;        /// &lt;remarks&gt;        /// This is used by the public methods        /// &lt;/remarks&gt;        /// &lt;param name=\"input\"&gt;Data to be encrypted/decrypted&lt;/param&gt;        /// &lt;param name=\"cryptoTransform\"&gt;        /// &lt;example&gt;des.CreateEncryptor(this.keyValue, this.iVValue)&lt;/example&gt;        /// &lt;/param&gt;        /// &lt;returns&gt;Byte data containing result of opperation&lt;/returns&gt;        private byte[] Transform(byte[] input, ICryptoTransform cryptoTransform)        {            // Create the necessary streams            MemoryStream memory = new MemoryStream();            CryptoStream stream = new CryptoStream(memory, cryptoTransform, CryptoStreamMode.Write);            // Transform the bytes as requesed            stream.Write(input, 0, input.Length);            stream.FlushFinalBlock();            // Read the memory stream and convert it back into byte array            memory.Position = 0;            byte[] result = new byte[memory.Length];            memory.Read(result, 0, result.Length);            // Clean up            memory.Close();            stream.Close();            // Return result            return result;        }    }}</pre></div><h2>Class written in VB</h2><div class=\"vb_block\"><pre>Imports System Imports System.Collections.Generic Imports System.Text Imports System.Security.Cryptography Imports System.IO Namespace Security     ''' &lt;summary&gt;    ''' Wrapper class for Triple Des encryption     ''' &lt;/summary&gt;    ''' &lt;remarks&gt;     ''' Author : Paul Hayman     ''' Date : Feb 2006    ''' info@PaulHayman.com     ''' &lt;/remarks&gt;    Public Class Encryption                 Private des As New TripleDESCryptoServiceProvider()         Private utf8 As New UTF8Encoding()                 Private keyValue As Byte()         Private iVValue As Byte()                 ''' &lt;summary&gt;        ''' Key to use during encryption and decryption         ''' &lt;/summary&gt;         ''' &lt;remarks&gt;         ''' &lt;example&gt;         ''' byte[] key = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 };         ''' &lt;/example&gt;        ''' &lt;/remarks&gt;         Public Property Key() As Byte()             Get                 Return keyValue             End Get             Set                 keyValue = value             End Set         End Property                 ''' &lt;summary&gt;         ''' Initialization vetor to use during encryption and decryption         ''' &lt;/summary&gt;        ''' &lt;remarks&gt;         ''' &lt;example&gt;         ''' byte[] iv = { 8, 7, 6, 5, 4, 3, 2, 1 };         ''' &lt;/example&gt;        ''' &lt;/remarks&gt;         Public Property iV() As Byte()             Get                 Return iVValue             End Get             Set                 iVValue = value             End Set         End Property                 ''' &lt;summary&gt;         ''' Constructor, allows the key and initialization vetor to be provided         ''' &lt;/summary&gt;        ''' &lt;param name=\"key\"&gt;&lt;see cref=\"Key\"/&gt;&lt;/param&gt;         ''' &lt;param name=\"iV\"&gt;&lt;see cref=\"iV\"/&gt;&lt;/param&gt;        Public Sub New(ByVal key As Byte(), ByVal iV As Byte())             Me.keyValue = key             Me.iVValue = iV         End Sub                 ''' &lt;summary&gt;         ''' Decrypt bytes         ''' &lt;/summary&gt;        ''' &lt;param name=\"bytes\"&gt;&lt;/param&gt;        ''' &lt;returns&gt;Decrypted data as bytes&lt;/returns&gt;        Public Function Decrypt(ByVal bytes As Byte()) As Byte()             Return Transform(bytes, des.CreateDecryptor(Me.keyValue, Me.iVValue))         End Function                 ''' &lt;summary&gt;         ''' Encrypt bytes         ''' &lt;/summary&gt;         ''' &lt;param name=\"bytes\"&gt;&lt;/param&gt;        ''' &lt;returns&gt;Encrypted data as bytes&lt;/returns&gt;         Public Function Encrypt(ByVal bytes As Byte()) As Byte()             Return Transform(bytes, des.CreateEncryptor(Me.keyValue, Me.iVValue))         End Function                 ''' &lt;summary&gt;         ''' Decrypt a string         ''' &lt;/summary&gt;         ''' &lt;param name=\"text\"&gt;&lt;/param&gt;        ''' &lt;returns&gt;Decrypted data as string&lt;/returns&gt;        Public Function Decrypt(ByVal text As String) As String             Dim input As Byte() = Convert.FromBase64String(text)             Dim output As Byte() = Transform(input, des.CreateDecryptor(Me.keyValue, Me.iVValue))             Return utf8.GetString(output)         End Function                 ''' &lt;summary&gt;         ''' Encrypt a string         ''' &lt;/summary&gt;         ''' &lt;param name=\"text\"&gt;&lt;/param&gt;        ''' &lt;returns&gt;Encrypted data as string&lt;/returns&gt;         Public Function Encrypt(ByVal text As String) As String             Dim input As Byte() = utf8.GetBytes(text)             Dim output As Byte() = Transform(input, des.CreateEncryptor(Me.keyValue, Me.iVValue))             Return Convert.ToBase64String(output)         End Function                 ''' &lt;summary&gt;         ''' Encrypt or Decrypt bytes.         ''' &lt;/summary&gt;         ''' &lt;remarks&gt;         ''' This is used by the public methods         ''' &lt;/remarks&gt;         ''' &lt;param name=\"input\"&gt;Data to be encrypted/decrypted&lt;/param&gt;        ''' &lt;param name=\"cryptoTransform\"&gt;         ''' &lt;example&gt;des.CreateEncryptor(this.keyValue, this.iVValue)&lt;/example&gt;         ''' &lt;/param&gt;         ''' &lt;returns&gt;Byte data containing result of opperation&lt;/returns&gt;         Private Function Transform(ByVal input As Byte(), ByVal cryptoTransform As ICryptoTransform) As Byte()             ' Create the necessary streams             Dim memory As New MemoryStream()             Dim stream As New CryptoStream(memory, cryptoTransform, CryptoStreamMode.Write)                         ' Transform the bytes as requesed             stream.Write(input, 0, input.Length)             stream.FlushFinalBlock()                         ' Read the memory stream and convert it back into byte array             memory.Position = 0             Dim result As Byte() = New Byte(memory.Length - 1) {}             memory.Read(result, 0, result.Length)                         ' Clean up             memory.Close()             stream.Close()                         ' Return result             Return result         End Function             End Class End Namespace </pre></div>"}