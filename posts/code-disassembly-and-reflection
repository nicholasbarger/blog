{"id":"code-disassembly-and-reflection","title":"Code Disassembly and Reflection","description":"","link":"http://nicholasbarger.com/2009/07/15/code-disassembly-and-reflection/","pubDate":"2009-07-15T23:53:27.000Z","content":"<p>One of the first tasks I was assigned when I started my new job was to recover some old source code that a contractor had developed for the company several years back.  My company had working dll’s but no source code to make changes from.  This was my first real exposure to Reflector and disassembling binary code.  I’ll be honest, I got a real kick out of, the hacker mentality of my youth came flooding back but without any guilt because this was a legitimate (and legal) reason to disassemble code.</p><p>Since then, I’ve found Reflector to be an invaluable tool in a developer’s arsenal for the following scenarios:</p><ul><li>Retrieving lost source code.</li><li>As a learning tool to peak into other, possibly more sophisticated code and code architecture.</li><li>To assist in troubleshooting third-party vendor software (which is certainly not immune to bugs).</li></ul><p>These are just a few reasons, but all contribute to advancing your skill as a developer and worth to your client(s)/company.</p><h2>Where can I get it and how much does it cost?</h2><img src=\"http://nbarger.files.wordpress.com/2010/01/redgate_logo.gif\" align=\"right\" style=\"padding:10px;\" /><p>There probably are a couple out there, but I use <a href=\"http://www.red-gate.com/products/reflector/\" target=\"_blank\">Red Gate’s .NET Reflector</a> which you can <a href=\"http://reflector.red-gate.com/download.aspx\" target=\"_blank\">download a FREE copy</a>.</p><p>Red Gate produces various other products that are useful, though many of them are not free.</p><h2>How do I use it?</h2><p>Glad you asked; Reflector is pretty easy to use.  First, begin by opening Reflector, selecting File &gt; Open and selecting a .NET based DLL that you would like to analyze.  For demonstration, I will be using one of the nopCommerce DLL’s, Nop.Common.dll.  (<a href=\"http://www.nopcommerce.com/\" target=\"_blank\">nopCommerce</a> is a .NET open-source ecommerce project).</p><p>If the Disassemble panel is not already open, go ahead and open it now by right clicking on the assembly you just loaded, and selecting Disassemble.</p><img src=\"http://nbarger.files.wordpress.com/2010/01/reflector_1.gif\" /><p>By drilling down the tree-style panel on the left side, you can see all of the individual namespaces that comprise the DLL.</p><img src=\"http://nbarger.files.wordpress.com/2010/01/reflector_2.gif\" /><p>This takes a bit of digging, but with enough patience you can find what you are looking for.  We will now select NopSolutions.NopCommerce.Common.Audit &gt; LogManager to view the code in this class.</p><img src=\"http://nbarger.files.wordpress.com/2010/01/reflector_3.gif\" /><p>Next let’s move to the right side panel and scroll to the very bottom and click \"Expand Methods\".  This will allow us to see all of the code in the class.  A nice touch is that you can view code in your language of preference, such as C# or VB.</p><img src=\"http://nbarger.files.wordpress.com/2010/01/reflector_4.gif\" /><p>You are now able to disassemble .NET code in a breeze, remember, \"with great power, comes great responsibility\"!  Please make sure that whatever you are disassembling you have the right to disassemble it.  Good luck on your next project.</p><p>Technorati code: zneh8mkst6</p>"}