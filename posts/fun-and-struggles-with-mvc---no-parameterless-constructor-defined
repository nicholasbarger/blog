{"id":"fun-and-struggles-with-mvc---no-parameterless-constructor-defined","title":"Fun and Struggles with MVC - No Parameterless Constructor Defined","description":"","link":"http://nicholasbarger.com/2012/03/11/fun-and-struggles-with-mvc-no-parameterless-constructor-defined/","pubDate":"2012-03-11T18:21:25.000Z","content":"<p>It’s taking a little while, but I’m starting to understand the magic behind model binding in MVC.  It’s fairly simply to try it out while watching videos and tutorials that are out there; but when I applied it to our enterprise application with a fairly large collection of domain models that already exist, I had less than ideal results.</p><p>Here’s the struggle I was having…</p><h2>The Problem</h2><p>I have an entity called a SalesRep which has several properties including a few complex object properties such as EmailAddress , PersonName (struct), and Address (street1, street2, city, state, etc.) as well as many primitives.</p><p>I had both GET and POST Create actions defined in the SalesRepController as follows:</p><div class=\"c_code\"><pre>/// &lt;summary&gt;/// Add a new sales rep./// &lt;/summary&amp;rt;/// &lt;returns&amp;rt;&lt;/returns&amp;rt;public ActionResult Create(){   return View(new SalesRep());}/// &lt;summary&gt;/// Save a new sales rep./// &lt;/summary&gt;/// &lt;param name=\"salesRep\"&gt;&lt;/param&gt;/// &lt;returns&gt;If successful, the SalesRep/List/ View.  If not successful, the current SalesRep/Create/ view.&lt;/returns&gt;[HttpPost]public ActionResult Create(SalesRep salesRep){   var logic = new SalesLogic();   logic.SaveSalesRep(ref salesRep);   return RedirectToAction(\"List\");}</pre></div><p>However, when calling the Create action on the SalesRepController, I would get the following Parameterless constructor error and could never even enter into a breakpoint.</p><img src=\"http://nbarger.files.wordpress.com/2012/03/no-parameterless.jpg\" alt=\"No Parameterless Constructor Defined for this object\" /><h2>The Solution</h2><p>After spending quite a bit of time experimenting and searching the internet, I couldn’t readily resolve the issue.  Feeling as though I was never going to grasp MVC, and cursing the videos that looked so ridiculously easy, I spun up a new trivial sandbox project.  I created new simplistic models, new controllers, and everything worked perfectly.  So what made my old enterprise entity classes different?  The answer was… the <strong>constructors</strong>.</p><p>As you can see in the above error message it is properly reporting that it could not find a parameterless constructor for the object; but which object?  I had been looking at the SalesRep object and even the View and Controllers, but what I should have been looking at was the complex properties within the SalesRep as MVC recursively reflected all of the properties and created them with a parameterless constructor.  In my case, we had an EmailAddress which specifies a single constructor: </p><div class=\"c_block\"><pre>public EmailAddress(string value) {   //our code}</pre></div><p>It was while MVC was <i>auto-magically</i> wiring up the form elements to the email address object that the action came tumbling down.</p><h2>A Simple Recreation</h2><p>I’ve recreated this scenario using a simpler class slightly modified from Scott Allen’s pluralsight demo’s.</p><p>Below is a screenshot of my newly created Movie class which contains three properties; Name, Year, and Studio.  Name and Year are both primitives, while Studio references another entity.</p><img src=\"http://nbarger.files.wordpress.com/2012/03/movie-class.gif\" alt=\"Movie Class\" /><p>Here is the Studio class with the pertinent name parameter constructor only.  <strong>There is no parameterless constructor in this class</strong> and because we have specified a constructor the default is overridden.</p><img src=\"http://nbarger.files.wordpress.com/2012/03/studio-class.gif\" alt=\"Studio Class\" /><p>When we now reference this property within the Create View to allow for model binding we will encounter the error.</p><img src=\"http://nbarger.files.wordpress.com/2012/03/createview.gif\" alt=\"Movie View\" /><p>We can correct this by adding a parameterless constructor in the Studio class and all is well again.</p>"}