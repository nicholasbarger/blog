{"id":"a-30+-year-old-mythical-man-month","title":"A 30+ Year Old Mythical Man Month","description":"","link":"http://nicholasbarger.com/2011/05/01/a-30-year-old-mythical-man-month/","pubDate":"2011-05-01T14:57:07.000Z","content":"<img src=\"http://nbarger.files.wordpress.com/2011/04/mythical_man-month.jpg\" alt=\"The Mythical Man Month\" style=\"float:right;margin-left:10px;margin-bottom:10px;\" /><p>I recently finished the Mythical Man Month by Frederick Brooks.  Many of you have probably heard of Brook's Law (<i>Adding manpower to a late software project makes it later</i>), and though this is the most popular and lasting theme of the book, additional sections of the writing are still relevant even after more than 30 years.  Pause and think about that for a moment, a computer book speaking on the development of mainframe operating systems is relevant today; a time when most twitter remarks are outdated after hours or even minutes.</p><p>The book covers the assembly of focused teams, establishing effective roles for team members, how communication becomes the linchpin of a project's success (which is the basis for why adding manpower can actually cause projects to be delayed even farther).</p><p>In addition to some of the interesting team development strategies and project management, there are some great quotes to remember from Mr. Brooks.  The following is one in reference to the joys of programming that grabbed my attention:</p><blockquote style=\"margin-top:20px;margin-bottom:20px;margin-left:0;padding-left:0;padding-bottom:0;font-style:italic;\">\"The programmer, like the poet, works only slightly removed from pure thought-stuff.  He builds his castles in the air, from air, creating by exertion of the imagination.  Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures.\"</blockquote><p>As I read this, it reinforces a development strategy I believe in, which is to have an idea of what you want, but as soon as possible to simply start.  In generally, it is inexpensive to start prototyping software.  It can be refined, scrapped, re-developed, and of course, there is always the infamous “phase two”.  All of this initial work helps define requirements, design architecture, and identify many of the unforeseen difficulties that will happen no matter how much up front planning you do.</p><p>If you're interested in learning more about Brook's Law and the unique challenges of development projects from the 70's, check Amazon to pick up your own copy: <a href=\"http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959/ref=sr_1_1?ie=UTF8&amp;qid=1304000450&amp;sr=8-1\" target=\"_blank\">http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959/ref=sr_1_1?ie=UTF8&amp;qid=1304000450&amp;sr=8-1</a></p>"}