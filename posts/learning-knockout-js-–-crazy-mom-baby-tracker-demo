{"id":"learning-knockout-js-–-crazy-mom-baby-tracker-demo","title":"Learning Knockout JS – Crazy Mom Baby Tracker Demo","description":"","link":"http://nicholasbarger.com/2012/05/20/learning-knockout-js-crazy-mom-baby-tracker-demo/","pubDate":"2012-05-20T02:22:58.000Z","content":"<p>I’m thrilled to be able to report my wife and I had our second daughter on May 8th, 2012.  Vanessa was 7 pounds even and very healthy.  Due to the birth, I took a few days off of work to help out (in many ways, I think I was more work for my wife being home).  Most of my time has been spent getting acquainted with my new daughter, but occasionally, I’ve grabbed an hour here and there, usually in the middle of the night after a feeding, to read about knockout and even write a small demo as a learning exercise.</p><p>This little app is not meant to serve any commercial value and is very simplistic, but given the current situation I felt it was a fun and fitting topic.</p><p><i>To any mom’s out there, I mean the title to be lighthearted – no offense intended!</i></p><p>Ok, on with the article.</p><img src=\"http://nbarger.files.wordpress.com/2012/05/crazymomstart.jpg\" alt=\"Knockout Demo Screenshot\" /><h2>What’s It Made Out Of?</h2><p>The Crazy Mom Baby Tracker is intended to exercise the following technologies:</p><ul><li><a href=\"http://html5.org\" target=\"_blank\">Html5</a></li><li><a href=\"http://jquery.com/\" target=\"_blank\">jQuery</a></li><li><a href=\"http://twitter.github.com/bootstrap/index.html\" target=\"_blank\">Bootstrap</a></li><li><a href=\"http://www.knockoutjs.com\" target=\"_blank\">Knockout</a></li><li><a href=\"http://www.jqplot.com/\" target=\"_blank\">jqPlot</a></li></ul><p>At the Southwest Florida .NET User Group, we recently had a Battle of the UI Frameworks which highlighted a general movement towards JavaScript-centric applications in the .net community.  I thought we were aggressive at work, perhaps even cutting edge, but alas – it turns out we’re about where everyone else appears to be right now. </p><p><strong>HTML5</strong> is, of course, the latest version of HTML (at the time of this blog post) and all the rage.  Though I will display HTML5 semantics, there are not any earth shattering HTML5 snippets throughout this demo.</p><p><strong>jQuery</strong> is found throughout, as it has become the de facto standard for working with JavaScript these days.</p><p><strong>Bootstrap</strong> was shown to me by our non-.NET marketing development team and it has been a nice addition for standardizing the HTML structure, CSS (or LESS) classes, and general user experience.</p><p><strong>Knockout</strong> is very recent for me and the main purpose of this educational demo.  It is a responsive MVVM JavaScript implementation that binds the UI to the underlying view model.</p><p><strong>jqPlot</strong> is a jQuery charting library that I added into the project to visualize the data more interestingly.</p><h2>A Little Prep Work Before We Get Building</h2><p>This application is pure HTML, CSS, and JavaScript.  As such, there is no need for the .net framework or Visual Studio.  However, it certainly is a nice IDE to work in and by using the Nuget Package Manager you can get up and running very quickly.  Therefore, all screenshots will be provided using Visual Studio, but this is not a requirement and you can ignore these references if you like.</p><p>First, let’s create a new Web Site.  In Visual Studio, click File &gt; New Website.  Then under the template selector, choose ASP.NET Empty Web Site.  By selecting this, you get a pretty bare web site that does not need to contain any ASP-related tags or code.  After selecting an appropriate location to store the files you should be ready to begin.</p><p>Next, right click the project and select Manage Nuget Packages.  You will want the following packages: jQuery, Bootstrap from Twitter, Knockout JS, and jqPlot.</p><img src=\"http://nbarger.files.wordpress.com/2012/05/nugetpackages.jpg\" alt=\"Nuget Packages\" /><p>Let’s also add a few placeholder files that we’ll work with later.  Please create the following:</p><ul><li>/Content/my.css</li><li>/Scripts/my.js</li><li>/index.html</li></ul><h2>Let’s Start Building</h2><p>At this point, everything should be ready for us to start getting to the good stuff.  Let’s open the index.html (our main application page) and add the css references for the selected Nuget packages, as well as our custom css file.</p><div class=\"html_block\"><pre>&lt;head&gt;    &lt;title&gt;Crazy Mom Demo&lt;/title&gt;    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Content/bootstrap.min.css\" /&gt;    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Content/bootstrap-responsive.min.css\" /&gt;    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Scripts/jqPlot/jquery.jqplot.min.css\" /&gt;    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Content/my.css\" /&gt;&lt;/head&gt;</pre></div><p>Next, let’s add our script tags to bring in the code for the Nuget packages, and our own placeholder js file which we will use to add all of our custom logic to drive the application.</p><div class=\"html_block\"><pre>&lt;body&gt;    &lt;script type=\"text/javascript\" src=\"Scripts/jquery-1.7.2.min.js\"&gt;&lt;/script&gt;    &lt;script type=\"text/javascript\" src=\"Scripts/bootstrap.min.js\"&gt;&lt;/script&gt;    &lt;script type=\"text/javascript\" src=\"Scripts/knockout-2.1.0.js\"&gt;&lt;/script&gt;    &lt;script type=\"text/javascript\" src=\"Scripts/jqPlot/jquery.jqplot.min.js\"&gt;&lt;/script&gt;    &lt;script type=\"text/javascript\" src=\"Scripts/my.js\"&gt;&lt;/script&gt;&lt;/body&gt;</pre></div><p>Now that the references are in place, we need to build the structure of the html.  Since we’re using bootstrap, we’re going to use the fixed grid layout they provide (hence the css classes “row” and “spanX”).  The basics are below.</p><div class=\"html_block\"><pre>&lt;div class=\"container\"&gt;&lt;h1 data-bind=\"text: title\"&gt;Title&lt;/h1&gt;&lt;div class=\"row\"&gt;\t&lt;!—-panel for data entry --&gt;\t&lt;div class=\"span8\"&gt;                \t&lt;/div&gt;\t&lt;!—-panel for my cute kids picture --&gt;\t&lt;div class=\"span4\"&gt;\t\t&lt;!-—we won’t cover adding this in the blog post --&gt;\t&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</pre></div><p>We need a container wrapping the layout, and a few other layout related div’s to format the page.  Notice the h1 tag which has our first knockout data-bind attribute.  This is going to look for a property on the viewmodel called “title” and bind the innerText to it’s value.</p><p>Next, inside the data entry panel, let’s add two textboxes and a pair of buttons to control adding baby weight entries.</p><div class=\"html_block\"><pre>&lt;form class=\"form-inline well\" data-bind=\"submit: addItem\"&gt;&lt;h3&gt;Enter the babies weight below&lt;/h3&gt;&lt;label&gt;Pounds&lt;/label&gt;&lt;input id=\"pounds\" type=\"text\" class=\"input-mini\" data-bind=\"hasfocus: true\" /&gt;&lt;label&gt;Remaining ounces&lt;/label&gt;&lt;input id=\"ounces\" type=\"text\" class=\"input-mini\" /&gt;&lt;button type=\"submit\" class=\"btn btn-primary\"&gt;&lt;i class=\"icon-ok icon-white\"&gt;&lt;/i&gt; Add Baby Weight&lt;/button&gt;&lt;button type=\"reset\" class=\"btn btn-danger\" data-bind=\"click: clearItems\"&gt;&lt;i class=\"icon-remove icon-white\"&gt;&lt;/i&gt; Start Over&lt;/button&gt;&lt;/form&gt;</pre></div><p>The css classes for the form are also from bootstrap and help to stylize the form.  You can view the bootstrap documentation for more details.</p><p>The form has a knockout binding for submit to call the function on the viewmodel “addItem”.  There is also a binding for the click event of the reset button to clear all data in the viewmodel (not just the form fields as normal).</p><p>Directly below the form, let’s add a section for displaying notifications and data validation.  We’ll again use knockout to bind the results of the messages based on what is happening in the viewmodel.</p><div class=\"html_block\"><pre>&lt;div id=\"alert\" class=\"alert\" data-bind=\"\tvisible: msg().length &gt; 0, \tcss: { \t\t'alert-success': msgType() == 'success', \t\t'alert-error': msgType() == 'error', \t\t'alert-info': msgType() == 'info' }\"&lt;                    &lt;a class=\"close\" href=\"#\" data-bind=\"click: hideAlert\"&gt;×&lt;/a&gt;&lt;p data-bind=\"text: msg\"&gt;&lt;/p&gt;&lt;/div&gt;</pre></div><p>Let’s now add the final pieces to allow for a bit of data visualization.  We’re going to use a chart control from jqPlot and a table displaying the individual entries.</p><div class=\"html_block\"><pre>&lt;div id=\"resultsChart\" data-bind=\"chart: items()\"&gt;&lt;/div&gt;&lt;table class=\"table table-striped\" data-bind=\"visible: items().length &gt; 0\"&gt;&lt;thead&gt;\t&lt;tr&gt;\t\t&lt;td&gt;Weight&lt;/td&gt;\t\t&lt;td&gt;Total Pounds&lt;/td&gt;\t\t&lt;td&gt;Total Ounces&lt;/td&gt;\t&lt;/tr&gt;&lt;/thead&gt;&lt;tbody data-bind=\"foreach: items\"&gt;\t&lt;tr&gt;\t\t&lt;td data-bind=\"text: display()\"&gt;&lt;/td&gt;\t\t&lt;td data-bind=\"text: totalPounds()\"&gt;&lt;/td&gt;\t\t&lt;td data-bind=\"text: totalOunces()\"&gt;&lt;/td&gt;\t\t&lt;td&gt;&lt;a href=\"#\" data-bind=\"click: $parent.removeItem\"&gt;&lt;i class=\"icon-remove\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;\t&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</pre></div><p>The chart is interesting, as it will be a custom binding we create for knockout to work with jqPlot.  Data within the table are bound to an array of items and looped through using the foreach knockout binding.  I’ve also added a remove button next to each entry to allow for the removal of entries added by mistake.  Notice the scoping when specifying the knockout binding; while looping through the items, we’re at the individual item level – therefore, we must move up one level to access the viewmodel directly ($parent) and call the removeItem function.</p><img src=\"http://nbarger.files.wordpress.com/2012/05/crazymomchart.jpg\" alt=\"jqPlot Chart Screenshot\" /><h2>Wiring Up the Logic with Knockout and jQuery</h2><p>Now that we have a clear picture of what we want this application to look like, let’s wire up the viewmodel and make it actually perform.</p><p>Open up your my.js file and begin by creating a good old jQuery ready event:</p><div class=\"c_block\"><pre>$(function () {});</pre></div><p>We’ll put our code in here.  Let’s also create our own namespace with the following code to avoid any collisions.</p><div class=\"c_block\"><pre>// global namespacevar my = my || {};</pre></div><p>We now need a model to structure the baby weight entries.  Let’s create it as follows:</p><div class=\"c_block\"><pre>// modelsmy.BabyWeight = function(pounds, ounces) {var self = this;self.pounds = pounds;self.remainingOunces = ounces;self.totalOunces = function () {\treturn (self.pounds * 16) + (self.remainingOunces * 1);};self.totalPounds = function () {\treturn (self.pounds * 1) + (self.remainingOunces / 16);};self.display = function () {\treturn self.pounds + 'lbs - ' + self.remainingOunces + 'oz';};};</pre></div><p>This could contain knockout observables and computed values, but it’s not particularly necessary the way the demo is set up.  The BabyWeight model has two properties: pounds and remainingOunces which together make up for the entire weight of the baby.  I’ve also added a few calculated properties to add to the tabular data for each entry.</p><p>Let’s now create the viewmodel which will contain the bulk of our knockout observables.</p><div class=\"c_block\"><pre>// view modelmy.vm = function(existingItems) {var self = this;// propertiesself.items = ko.observableArray(existingItems);self.msg = ko.observable(\"\");self.msgType = ko.observable(\"info\");self.title = ko.observable(\"Crazy Mom Baby Tracker v.001\");// methodsself.addItem = function () {\tvar pounds = $('#pounds').val();\tvar remainingOunces = $('#ounces').val();\tvar itemToAdd = new my.BabyWeight(pounds, remainingOunces);\t\t// validate\tif (itemToAdd.pounds == \"\" || itemToAdd.ounces == \"\") {\t\tself.msgType(\"error\");\t\tself.msg(\"Oops, either the baby has become weightless or you didn't enter any data.\");\t\treturn;\t}\telse {\t\tself.msg(\"\");\t}\t// add to items array\tself.items.push(itemToAdd);\t// update msg\tself.msgType(\"success\");\tself.msg(\"You've successfully weighed the baby in at \" + itemToAdd.display());},self.clearItems = function () {\t// clear items\tself.items([]);\t// update msg\tself.msgType(\"info\");\tself.msg(\"All weight entries have been cleared.\");},self.hideAlert = function () {\tself.msg(\"\");  //clearing the message will auto-hide since it's bound},self.removeItem = function (item) {\t// remove item from items array\tself.items.remove(item);\t// update msg\tself.msgType(\"info\");\tself.msg(\"The weight entry has been successfully removed.\");}};    </pre></div><p>Note the use of this line:</p><div class=\"c_block\"><pre>var self = this;</pre></div><p>This helps to maintain reference to the proper <strong>this</strong> when inside callbacks from anonymous functions.</p><p>The observables ensure that changes to their values will be automatically reflected in the UI for any bindings.  For example, as an item is added or removed from the items array, the UI for the chart and table will automatically be updated, well as soon as we add the custom binding to the chart that is.  Let’s add that now:</p><div class=\"c_block\"><pre>// kick off knockout bindingsko.applyBindings(new my.vm([]));    // add custom binding for chartingko.bindingHandlers.chart = {init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\t// empty - left as placeholder if needed later},update: function (element, valueAccessor, allBindingsAccessor, viewModel) {\t// prepare chart values\tvar items = ko.utils.unwrapObservable(valueAccessor);\tvar chartValues = [[]];\tfor (var i = 0; i &lt; items().length; i++) {\t\tchartValues[0].push(items()[i].totalOunces());\t}\t// clear previous chart\t$(element).html(&quot;&quot;);\t// plot chart\t$.jqplot(element.id, chartValues, {\t\ttitle: &#039;Baby Weight&#039;\t});}};</pre></div><p>The custom binding simply updates the chart on any change to the passed in valueAccessor, which we specified in the html as the items array in the viewmodel.  jqPlot uses the element.id, in our case a div tag, to act as the placeholder container to drop the chart into.  See the jqPlot documentation for much more detail on creating significantly more elaborate charting capabilities.</p><h3>Some Odds and Ends</h3><p>I didn’t cover the my.css file but I used this to add some very minor additional styling to the page.  Most of the styles though do come “out of the box” from bootstrap.  I hope someone finds this useful and please feel free to correct any mistakes I’ve made – this is certainly meant to reinforce my own pursuit in working with knockout and I welcome any advice.</p>","imageUrl":"http://nbarger.files.wordpress.com/2012/05/crazymomstart.jpg"}