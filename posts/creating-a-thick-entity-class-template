{"id":"creating-a-thick-entity-class-template","title":"Creating a Thick Entity Class Template","description":"","link":"http://nicholasbarger.com/2009/01/23/creating-a-thick-entity-class-template/","pubDate":"2009-01-23T19:31:34.000Z","content":"    <p>Templates in Visual Studio are a great way to promote consistency as well as take some of the chore out of common layout when creating items or projects.  Creating templates         is easy to do in Visual Studio; you can get started by simply converting existing classes by clicking File &gt; Export Template, and from there follow the wizard.  Another option, to gain maximum flexibility, is to create the template by simply using a basic text editor (even Notepad works fine for this).</p>    <p>You can view several pre-existing templates that come pre-built with Visual Studio found in the         ItemTemplate and ProjectTemplate directories (My paths are: C:\\Program Files\\Microsoft Visual Studio 9.0\\Common7\\IDE\\ItemTemplates         and C:\\Program Files\\Microsoft Visual Studio 9.0\\Common7\\IDE\\ProjectTemplates,         respectively).  The templates are zip files that generally contain three files, your template code (.cs), a template configuration file, and the icon image for the template.</p>    <h2>What is a Thick Entity Class?</h2>    <p>A thick entity is a class that describes an entity object which also includes, or is at least knowledgeable of business logic as well.  A thin entity would be an entity object which only describes the properties of the object (much like an interface) and does not contain methods/functions.  There are pro's and con's to both which is an entire discussion outside of the scope of this particular article.</p>    <p>The following is a template for creating thick entity classes, or you can <a href=\"http://www.nicholasbarger.com/docs/thickentity.zip\">download the thick entity class template here</a> and simply copy it to your Visual Studio user template directory (I would place mine here: My Documents\\Visual Studio 2008\\Templates\\ItemTemplates\\Visual C#).</p><strong>ThickEntity.cs</strong>    <div class=\"c_block\"><pre>using System;using System.Collections.Generic;$if$ ($targetframeworkversion$ == 3.5)using System.Linq;$endif$using System.Text;namespace $rootnamespace${    public class $safeitemrootname$    {        #region \"PROPERTIES\"        /// &lt;summary&gt;        /// Unique identifier for the $safeitemrootname$.        /// &lt;/summary&gt;        public int ID { get; set; }        //TODO: Add additional entity properties        #endregion        #region \"CONSTRUCTORS\"        /// &lt;summary&gt;        /// Create an $safeitemrootname$ in memory.        /// &lt;/summary&gt;        public $safeitemrootname$()        {        }        #endregion        #region \"METHODS\"        /// &lt;summary&gt;        /// Load existing $safeitemrootname$ from database.        /// &lt;/summary&gt;        /// &lt;param name=\"id\"&gt;&lt;/param&gt;        public void LoadData(int id)        {            //TODO: Load from database        }//Add any additional load mechanisms/helpers        /// &lt;summary&gt;        /// Save $safeitemrootname$ to database.        /// &lt;/summary&gt;        /// &lt;param name=\"msg\"&gt;&lt;/param&gt;        /// &lt;returns&gt;&lt;/returns&gt;        public bool Save(ref string msg)        {            bool result = false;            //Validate for good input data            result = ValidateData(ref msg);            if (result == false)            {                return false;            }            //Reset result after clears validation            result = false;            //Save to database            try            {                if (this.ID &gt; 0)                {                    //TODO: Call update function                }                else                {                    //TODO: Call create function                    if (this.ID &gt; 0)                    {                        result = true;                    }                    else                    {                        result = false;                    }                }            }            catch (Exception ex)            {                //TODO: Log exception            }            if (result == false &amp;&amp; string.IsNullOrEmpty(msg))            {                //Catch-all generic error                msg = \"An error ocurred while saving.\";            }            return result;        }        /// &lt;summary&gt;        /// Validate data for $safeitemrootname$.        /// &lt;/summary&gt;        /// &lt;returns&gt;&lt;/returns&gt;        public bool ValidateData()        {            string msg = string.Empty;            bool isValid = ValidateDataHelper(ref msg);            return isValid;        }        /// &lt;summary&gt;        /// Validate data for $safeitemrootname$.        /// &lt;/summary&gt;        /// &lt;param name=\"msg\"&gt;&lt;/param&gt;        /// &lt;returns&gt;&lt;/returns&gt;        public bool ValidateData(ref string msg)        {            bool isValid = ValidateDataHelper(ref msg);            return isValid;        }        /// &lt;summary&gt;        /// Validate data for $safeitemrootname$.        /// &lt;/summary&gt;        /// &lt;param name=\"msg\"&gt;&lt;/param&gt;        /// &lt;returns&gt;&lt;/returns&gt;        private bool ValidateDataHelper(ref string msg)        {            StringBuilder sb = new StringBuilder();            bool isValid = true;            //TODO: Add validation logic            if (string.IsNullOrEmpty(sb.ToString()) == false)            {                sb.Insert(0, \"Oops, some of the data you entered needs attention:\");                msg = sb.ToString();            }            else            {                msg = string.Empty;            }            return isValid;        }        #endregion        #region \"STATIC METHODS\"        /// &lt;summary&gt;        /// Get complete list of $safeitemrootname$s.        /// &lt;/summary&gt;        /// &lt;returns&gt;&lt;/returns&gt;        public static List&lt;$safeitemrootname$&gt; Get$safeitemrootname$s()        {            var coll = new List&lt;$safeitemrootname$&lt;();                //TODO: Load list from data access layer    //Example:    //var dataColl = $rootnamespace$.DataAccess.Get$safeitemrootname$s();            //foreach (dataIssue dataItem in dataColl)            //{            //    Issue issue = new Issue();            //    issue.LoadData(linqItem);            //    coll.Add(issue);            //}            return coll;        }        #endregion    }}</pre></div><strong>MyTemplate.vstemplate</strong>    <div class=\"c_block\"><pre>&lt;VSTemplate Version=\"2.0.0\" xmlns=\"http://schemas.microsoft.com/developer/vstemplate/2005\" Type=\"Item\"&gt;  &lt;TemplateData&gt;    &lt;DefaultName&gt;ThickEntity.cs&lt;/DefaultName&gt;    &lt;Name&gt;ThickEntity&lt;/Name&gt;    &lt;Description&gt;Create a thick (contains business logic) entity class.&lt;/Description&gt;    &lt;ProjectType&gt;CSharp&lt;/ProjectType&gt;    &lt;SortOrder&gt;10&lt;/SortOrder&gt;    &lt;Icon&gt;__TemplateIcon.ico&lt;/Icon&gt;  &lt;/TemplateData&gt;  &lt;TemplateContent&gt;    &lt;References /&gt;    &lt;ProjectItem SubType=\"Code\" TargetFileName=\"$fileinputname$.cs\" ReplaceParameters=\"true\"&gt;ThickEntity.cs&lt;/ProjectItem&gt;  &lt;/TemplateContent&gt;&lt;/VSTemplate&gt;</pre></div><p>Do you have a collection of useful templates that you would like to share? I would love to share, discuss, and add your templates to my collection.  Please <a href=\"http://www.nicholasbarger.com/contact.aspx\">contact me</a> or leave code samples directly in the comments.</p>"}