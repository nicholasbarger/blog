{"id":"common-reusable-business-entities-part-2","title":"Common Reusable Business Entities Part 2","description":"","link":"http://nicholasbarger.com/2009/03/16/common-reusable-business-entities-part-2/","pubDate":"2009-03-16T23:42:39.000Z","content":"<div style=\"background-color:#FFFFCC;border:1px solid #CCC;padding:3px;\"><p>This is part two of an ongoing series on common reusable business entities.  This series does not need to be read in order, but here are the preceeding posts if you would like to catch up:</p><ul>\t<li><a href=\"http://nbarger.wordpress.com/2009/03/11/common-reusable-business-entities-part-1/\">Common Reusable Business Entities Part 1</a></li></ul></div><p>In this post, we're going to examine a short but useful structure that can be used in almost every business-style application you will write; the Address structure.</p><p><h2>Address Structure</h2><p>The Address structure specifies information regarding a physical mailing address.  Obviously, this is used all over the place, but a few examples include E-Commerce shipping and billing addresses, user profile addresses, and a foundation for geocoding property/locations.    Overall, all of the entities to be demonstrated in this short series are meant to be thin, without a lot of functionality or business logic.</p><div class=\"c_block\"><pre>public struct Address{    #region \"PROPERTIES\"    /// &lt;summary&gt;    /// The prefix of the street address.  (Ex: 1400 Pennsylvania Ave.)    /// &lt;/summary&gt;    public string Address1 { get; set; }    /// &lt;summary&gt;    /// The suffix of the street address.  (Ex: Apt. 14)    /// &lt;/summary&gt;    public string Address2 { get; set; }    /// &lt;summary&gt;    /// The city of the address.    /// &lt;/summary&gt;    public string City { get; set; }    /// &lt;summary&gt;    /// The state of the address (2 character string - could be entity).    /// &lt;/summary&gt;    public string State { get; set; }  //NOTE: it may be more appropriate to have this as an object    /// &lt;summary&gt;    /// The country of the address (3 character representation: USA, CHN, JPN)    /// &lt;/summary&gt;    public string Country { get; set; }  //NOTE: it may be more appropriate to have this as an object    /// &lt;summary&gt;    /// The postal code of the address.    /// &lt;/summary&gt;    public string Zip { get; set; }      #endregion    #region \"CONSTRUCTORS\"    /// &lt;summary&gt;    /// Constructor for address.    /// &lt;/summary&gt;    /// &lt;param name=\"address1\"&gt;&lt;/param&gt;    /// &lt;param name=\"address2\"&gt;&lt;/param&gt;    /// &lt;param name=\"city\"&gt;&lt;/param&gt;    /// &lt;param name=\"state\"&gt;&lt;/param&gt;    /// &lt;param name=\"country\"&gt;&lt;/param&gt;    /// &lt;param name=\"zip\"&gt;&lt;/param&gt;    public Address(string address1, string address2, string city, string state, string country, string zip)        : this()    {        this.Address1 = address1;        this.Address2 = address2;        this.City = city;        this.State = state;        this.Country = country;        this.Zip = zip;    }    #endregion    #region \"METHODS\"    /// &lt;summary&gt;    /// Overrides ToString() to display default address format (Address1 Address2 City, State Zip).    /// &lt;/summary&gt;    /// &lt;returns&gt;&lt;/returns&gt;    public override string ToString()    {        return (this.Address1 + \" \" + this.Address2 + \" \" + this.City + \", \" + this.State + \" \" + this.PostalCode);    }    #endregion}</pre></div><h3>What's Next?</h3><p>I'll cover three short entities in the next part; SocialSecurityNumber, CreditCardNumber and PhoneNumber, so feel free to come back and check it out.  Also, please add any requests for specific common entities or add your own in the comments below.</p>"}