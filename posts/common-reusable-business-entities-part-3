{"id":"common-reusable-business-entities-part-3","title":"Common Reusable Business Entities Part 3","description":"","link":"http://nicholasbarger.com/2009/03/19/common-reusable-business-entities-part-3/","pubDate":"2009-03-19T23:43:51.000Z","content":"<div style=\"background-color:#ffffcc;border:1px solid #CCC;padding:3px;\">This is part two of an ongoing series on common reusable business entities. This series does not need to be read in order, but here are the preceeding posts if you would like to catch up:<ul><li><a href=\"http://nbarger.wordpress.com/2009/03/11/common-reusable-business-entities-part-1/\">Common Reusable Business Entities Part 1</a></li><li><a href=\"http://nbarger.wordpress.com/2009/03/16/common-reusable-business-entities-part-2/\">Common Reusable Business Entities Part 2</a></li></ul></div>This will be the final article in a three part series regarding Common Business Entities. The original hope was to provide a a few common business objects that are used across <em>most</em> business-style applications. Additionally, I hoped to demonstrate at least a skeleton of business entitities that those unfamiliar with custom object creation could begin playing with.In this article, we'll cover a few important numbers; such as the CreditCardNumber, SocialSecurityNumber, and PhoneNumber objects. The structures do not have a lot of business logic (such as validation), because I am attempting to demonstrate very lean entities (as recently seen in WCF-style applications) and leave the logic up to the business layer to be called upon. If you chose to use these objects in your own application, <strong>please ensure you add validation as you could see unexpected results.</strong>So let's get to it:<h2>CreditCardNumber Structure</h2><div class=\"c_block\"><pre>public struct CreditCardNumber{    #region \"PROPERTIES\"    /// &lt;summary&gt;    /// The type of credit card (VISA, Mastercard, etc.).    /// &lt;/summary&gt;    public enum CreditCardType    {        VISA,        Mastercard,        AmericanExpress,        Discover    }    /// &lt;summary&gt;    /// The credit card number without any formatting.    /// &lt;/summary&gt;    public string Value { get; set; }    /// &lt;summary&gt;    /// The type of credit card (VISA, Mastercard, etc.).    /// &lt;/summary&gt;    public CreditCardType Type { get; set; }    /// &lt;summary&gt;    /// The secure credit card CVV number.    /// &lt;/summary&gt;    public int? CVV { get; set; }  //123    /// &lt;summary&gt;    /// The expiration month of the credit card as a two digit integer.    /// &lt;/summary&gt;    public int ExpirationMonth { get; set; }  //12    //NOTE: This could be an enum or it's own object (Month), but for simplicity I am just showing an integer    /// &lt;summary&gt;    /// The expiration year of the credit card as a four digit integer.    /// &lt;/summary&gt;    public int ExpirationYear { get; set; }  //2009    /// &lt;summary&gt;    /// The masked credit card number.    /// &lt;/summary&gt;    public string Masked  //XXXXXXXXXXXX1234    {        get        {            string result = string.Empty;            if (!string.IsNullOrEmpty(Value))            {                int length = Value.Length;                string suffix = Value.Substring(length - 4, 4);                return string.Format(\"XXXXXXXXXXXX{0}\", suffix);            }            return result;        }    }    #endregion    #region \"CONSTRUCTORS\"    /// &lt;summary&gt;    /// Create a new credit card number.    /// &lt;/summary&gt;    /// &lt;param name=\"value\"&gt;&lt;/param&gt;    /// &lt;param name=\"expirationMonth\"&gt;&lt;/param&gt;    /// &lt;param name=\"expirationYear\"&gt;&lt;/param&gt;    /// &lt;param name=\"creditCardType\"&gt;&lt;/param&gt;    public CreditCardNumber(string value, int expirationMonth, int expirationYear, CreditCardType creditCardType) : this()    {        Value = value;        ExpirationMonth = expirationMonth;        ExpirationYear = expirationYear;        this.Type = creditCardType;    }    /// &lt;summary&gt;    /// Create a new credit card number.    /// &lt;/summary&gt;    /// &lt;param name=\"value\"&gt;&lt;/param&gt;    /// &lt;param name=\"expirationMonth\"&gt;&lt;/param&gt;    /// &lt;param name=\"expirationYear\"&gt;&lt;/param&gt;    /// &lt;param name=\"creditCardType\"&gt;&lt;/param&gt;    /// &lt;param name=\"cvv\"&gt;&lt;/param&gt;    public CreditCardNumber(string value, int expirationMonth, int expirationYear, CreditCardType creditCardType, int? cvv) : this()    {        Value = value;        ExpirationMonth = expirationMonth;        ExpirationYear = expirationYear;        this.Type = creditCardType;        CVV = cvv;    }    #endregion}</pre></div><h2>SocialSecurityNumber Structure</h2><div class=\"c_block\"><pre>public struct SocialSecurityNumber{    #region \"PROPERTIES\"    /// &lt;summary&gt;    /// The social security number without any formatting.    /// &lt;/summary&gt;    public string Value { get; set; } //123121234    /// &lt;summary&gt;    /// A masked version of the social security number.    /// &lt;/summary&gt;    public string Masked  //XXX-XX-1234    {        get        {            string result = string.Empty;            if(Value.Length == 9)            {                result = string.Format(\"XXX-XX-{0}\", Value.Substring(4, 4));            }            return result;        }    }    #endregion    #region \"CONSTRUCTORS\"    /// &lt;summary&gt;    /// Create a new social security number.    /// &lt;/summary&gt;    /// &lt;param name=\"value\"&gt;&lt;/param&gt;    public SocialSecurityNumber(string value)    {        Value = value;    }    #endregion}</pre></div><h2>PhoneNumber Structure</h2><div class=\"c_block\"><pre>public struct PhoneNumber{    #region \"PROPERTIES\"    /// &lt;summary&gt;    /// The phone number without any formatting.    /// &lt;/summary&gt;    public string Value { get; set; } //2395551234    /// &lt;summary&gt;    /// The areacode of the phone number.    /// &lt;/summary&gt;    public string Areacode //239    {        get        {            string result = string.Empty;            if(Value.Length == 10)            {                result = Value.Substring(0, 3);            }            return result;        }    }    /// &lt;summary&gt;    /// The prefix of the phone number.    /// &lt;/summary&gt;    public string Prefix //555    {        get        {            string result = string.Empty;            if(Value.Length == 10)            {                result = Value.Substring(3, 3);            }            return result;        }    }     /// &lt;summary&gt;    /// The suffix of the phone number.    /// &lt;/summary&gt;    public string Suffix //1234    {        get        {            string result = string.Empty;            if(Value.Length == 10)            {                result = Value.Substring(6, 4);            }            return result;        }    }     /// &lt;summary&gt;    /// The masked phone number.    /// &lt;/summary&gt;    public string Masked //(XXX)XXX-1234    {        get        {            string result = string.Empty;            if(Value.Length == 10)            {                result = string.Format(\"(XXX)XXX-{0}\", Suffix);            }            return result;        }    }    #endregion    #region \"CONSTRUCTORS\"    public PhoneNumber(string value) : this()    {        Value = value;    }    #endregion    #region \"METHODS\"    public override string ToString()    {        return string.Format(\"({0}){1}-{2}\", Areacode, Prefix, Suffix);    }    #endregion}</pre></div><h3>One Very Important Note</h3>I've mentioned it already, but please note that in an effort to make these lean, I have not really added any validation to the entities. This is most certainly something you will need to add, perhaps in the entity itself, a business layer, or wherever you see fit to add this validation. You will certainly get unexpected results without validating your entities. Also, it may be appropriate to throw exceptions when attempting to retrieve properties that are dependent on another property that is not filled out. Here, I've simply returned an empty string in most cases, so it depends on your preferential usage.As always, please feel free to add any comments about entities, best practices, code standards, structure, pro's and con's of logic within entities, and any other goodies you would like to contribute. Good luck and happy coding!"}