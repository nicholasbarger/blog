{"id":"creating-greater-application-error-transparency","title":"Creating Greater Application Error Transparency","description":"","link":"http://nicholasbarger.com/2008/10/22/creating-greater-application-error-transparency/","pubDate":"2008-10-22T18:34:07.000Z","content":"<img src=\"http://nbarger.files.wordpress.com/2010/01/robot_detective.jpg\" alt=\"Application Error Tracking\" align=\"right\" style=\"padding:5px;\" /><p>Often times, when we develop applications for the real world we are put in a position where we can't just test our applications in a normal debug fashion.  Perhaps the error is only caused on a production server while the local or test servers work fine.  Also, applications in a production environment tend to work with several other external applications, services, resources, etc. that are not available or apparent on a local machine.</p><p>By adding a little code to the global.asax file which is triggered anytime an application breaks, we can peer into problems we experience; and even become proactive in addressing issues before our customers complain.</p><p>This <i>advanced warning</i>, can really open your eyes to just how often a web application is crashing without you even knowing it, as well as provide a wealth of information for hard to replicate issues such as bugs from specific browsers, sessions, cookies, or even individual users!</p><div style=\"clear:right;\"></div><h2>Global.asax VB Code</h2><div class=\"vb_block\"><pre>' Code that runs when an unhandled error occursSub Application_Error(ByVal sender As Object, ByVal e As EventArgs)    'Get reference to context    Dim Context = HttpContext.Current        'Create new exception    Dim Exception As New Exception        'If non-local, then send error (while debugging/developing, etc. doesn't constantly throw errors)    If Context.Request.Url.AbsoluteUri.IndexOf(\"localhost\") &lt; 0 Then        &#39;NOTE: If you have session values that are pertinent to identifying user, session, interaction, etc.        &#39;this is a good place to reference those for display as well.                Try            &#39;Get reference to thrown error            Exception = Context.Server.GetLastError()                        Dim sb As New StringBuilder()                        sb.Append(&quot;An error has occurred on &quot; &amp; ConfigurationManager.AppSettings(&quot;baseHref&quot;) &amp; &quot;. A user requested &quot; &amp; Request.Path.ToString &amp; chr(13) &amp; chr(13))            sb.Append(&quot;OS: &quot; &amp; Request.Browser.Platform &amp; chr(13))            sb.Append(&quot;Machine Name: &quot; &amp; Environment.MachineName.ToString &amp; chr(13))            sb.Append(&quot;Browser: &quot; &amp; Request.Browser.Browser.ToString &amp; &quot; - Ver. &quot; &amp; Request.Browser.MajorVersion.ToString &amp; chr(13))            sb.Append(&quot;Method Name: &quot; &amp; Session(&quot;METHOD_NAME&quot;) &amp; chr(13))            sb.Append(&quot;Source: &quot; &amp; Exception.Source &amp; chr(13))            sb.Append(&quot;Message: &quot; &amp; Exception.Message &amp; chr(13))            sb.Append(&quot;Message Details: &quot; &amp; Exception.InnerException.ToString() &amp; chr(13))            sb.Append(&quot;Target Site: &quot; &amp; Exception.TargetSite.Name &amp; chr(13) &amp; chr(13))            sb.Append(&quot;Stack Trace: &quot; &amp; Exception.StackTrace &amp; chr(13))                                    &#39;NOTE: Add delivery mechanism (email, write to log file, write to db, write to event viewer, etc.) for sb.toString()                    Catch ex As Exception            &#39;Custom handling here... perhaps no logging done, retry, or try tiered logging if one log mechanism fails...                        Exit Sub        End Try    End IfEnd Sub</pre></div><p>Special thanks to Budi Awan, who first brought this up to me.</p>"}