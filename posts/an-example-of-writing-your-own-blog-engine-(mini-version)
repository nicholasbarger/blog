{"id":"an-example-of-writing-your-own-blog-engine-(mini-version)","title":"An Example of Writing Your Own Blog Engine (mini-version)","description":"","link":"http://nicholasbarger.com/2008/08/03/an-example-of-writing-your-own-blog-engine-mini-version/","pubDate":"2008-08-03T13:58:44.000Z","content":"<p><i>Preface</i>: Obviously blog engines can be much more comprehensive than what I will be describing in this article.  This is just something to show a few techniques to get you started.</p><p>This is a three part series, please check back soon for the next two parts (business layer and presentation layer).</p><h2>The Database (Barebones)</h2><p>In this blog engine, we're only going to have two tables; blog posts and blog comments.  The tables look as follows:</p><h3>Blog Posts Table</h3><table class=\"sql_table\"><tr class=\"sql_table_header\">\t<td><b>BlogPosts</b></td>\t<td>&nbsp;</td>\t<td>&nbsp;</td></tr><tr>\t<td>BlogID</td>\t<td>&nbsp;(PK, int, not null)</td>\t<td>Internal ID of blog post</td></tr><tr>\t<td>Title </td>\t<td>(varchar(100), not null)</td>\t<td>The title of the blog post</td></tr><tr>\t<td>Summary </td>\t<td>(varchar(200), null)</td>\t<td>A brief description of blog post (displayed in rss lists)</td></tr><tr>\t<td>Description </td>\t<td>(varchar(8000), not null)</td>\t<td>The actual content of the blog post</td></tr><tr>\t<td>DateCreated </td>\t<td>(datetime, not null)</td>\t<td>Date blog post was created</td></tr><tr>\t<td>DateUpdated </td>\t<td>(datetime, not null)</td>\t<td>Date blog post was last updated</td></tr></table><p>    <b>Note</b>: We&#39;re creating this as though it can only have one blog.&nbsp; This model     will not support multiple blogs without adding a higher level table to track     individual blogs, but that&#39;s a pretty simple enhancement you can make.</p><h3>Blog Comments Table</h3><table class=\"sql_table\"><tr class=\"sql_table_header\">\t<td><b>BlogComments</b></td>\t<td>&nbsp;</td>\t<td>&nbsp;</td></tr><tr>\t<td>BlogCommentID </td>\t<td>(PK, int, not null)</td>\t<td>Internal ID of blog post comment</td></tr><tr>\t<td>BlogID </td>\t<td>(FK, int, not null)</td>\t<td>ID of blog post the comment responds to</td></tr><tr>\t<td>Username </td>\t<td>(varchar(100), null)</td>\t<td>Username of user commenting (can be anonymous)</td></tr><tr>\t<td>Email </td>\t<td>(varchar(100), null)</td>\t<td>Email of user commenting (can be anonymous)</td></tr><tr>\t<td>URL </td>\t<td>(varchar(250), null)</td>\t<td>URL of trackback/additional content</td></tr><tr>\t<td>Comment </td>\t<td>(varchar(2000), not null)</td>\t<td>The actual content of the blog post comment</td></tr><tr>\t<td>DateCreated </td>\t<td>(datetime, not null)</td>\t<td>Date comment was created</td></tr><tr>\t<td>DateUpdated </td>\t<td>(datetime, not null)</td>\t<td>Date comment was last updated (usually never changes)</td></tr></table><p><b>Note</b>: An additional enhancement you may want to make is to create an approval process of comments.  There are several ways to do this, one way could be to simply add a new column in the BlogComments table which toggles status of comment.  An administrator could then manually change the status of comments to be approved or not.</p><p>Great, database tables are done - not very hard, right?  Next, lets go ahead and write a few stored procedures to handle data manipulation.</p><h3>SPROC's</h3><p>We're going to create four simple stored procedures to handle creating a new blog post, updating an existing blog post, deleting a blog post, and finally, create a blog comment.</p><h4>CreateBlogPost</h4><div class=\"sql_block\"><pre>SET ANSI_NULLS ONGOSET QUOTED_IDENTIFIER ONGO-- =============================================-- Author:\tNicholas Barger-- Create date: 04/01/2008-- Description:\tCreates a new blog post-- =============================================CREATE PROCEDURE [dbo].[spCreateBlogPost] @Title varchar(100),@Summary varchar(200),@Description varchar(8000),@BlogID int outputAS BEGINSET NOCOUNT ON;INSERT INTO dbo.BlogPosts (Title, Summary, Description) VALUES (@Title, @Summary, @Description);SELECT @BlogID = SCOPE_IDENTITY();ENDGO</pre></div><h4>DeleteBlogPost</h4><div class=\"sql_block\"><pre>SET ANSI_NULLS ONGOSET QUOTED_IDENTIFIER ONGO-- =============================================-- Author:\tNicholas Barger-- Create date: 04/01/2008-- Description:\tDeletes an existing blog post-- =============================================CREATE PROCEDURE [dbo].[spDeleteBlogPost] @BlogID intAS BEGINSET NOCOUNT ON;DELETE FROM BlogPosts WHERE BlogID = @BlogID;ENDGO</pre></div><h4>UpdateBlogPost</h4><div class=\"sql_block\"><pre>SET ANSI_NULLS ONGOSET QUOTED_IDENTIFIER ONGO-- =============================================-- Author:\tNicholas Barger-- Create date: 04/01/2008-- Description:\tUpdates an existing blog post-- =============================================CREATE PROCEDURE [dbo].[spUpdateBlogPost] @BlogID int, @Title varchar(100),@Description varchar(8000),@Summary varchar(200) = nullAS BEGINSET NOCOUNT ON;UPDATE dbo.BlogPosts SET DateUpdated = getDate(), Title = @Title, Summary = @Summary, Description = @Description WHERE BlogID = @BlogID;ENDGO</pre></div><h4>CreateBlogComment</h4><div class=\"sql_block\"><pre>SET ANSI_NULLS ONGOSET QUOTED_IDENTIFIER ONGO-- =============================================-- Author:\tNicholas Barger-- Create date: 04/01/2008-- Description:\tCreates a new blog post comment-- =============================================CREATE PROCEDURE [dbo].[spCreateBlogComment] @BlogID int, @Username varchar(100) = null,@Email varchar(100) = null,@URL varchar(250) = null,@Comment varchar(2000),@BlogCommentID int outputAS BEGINSET NOCOUNT ON;INSERT INTO dbo.BlogComments (BlogID, Username, Email, URL, Comment) VALUES (@BlogID, @Username, @Email, @URL, @Comment);SELECT @BlogCommentID = SCOPE_IDENTITY();ENDGO</pre></div><p>Ok, we're going to stop there for this part of the series.  Please check back later when I demonstrate how we start using the database we setup!</p><p>Remember, this is not only good practice for writing a simple application, but it's also really beneficial to develop the basis of a blog engine that you can now build any custom features you can't get with out of the box blog services or engines.  So, at the end of this series, be sure to take this code and make it your own by adding to it.  Feel free to     write me back with additional features you've come up with in the comments below!</p>"}