{"id":"subversion-tips","title":"Subversion Tips","description":"","link":"http://nicholasbarger.com/2009/10/28/subversion-tips/","pubDate":"2009-10-28T23:57:58.000Z","content":"<p>Source control is an important concept in modern day programming, especially when working in a team environment.  Most Microsoft-based shops use either Sourcesafe or Team Foundation Server (TFS).  TFS is a great product, it does everything under the sun, but at a pretty hefty cost.  In steps Subversion, lightweight, capable, and (drum roll)... free!  I tend to promote things that are both competent and well priced.  I certainly encourage you to look into Subversion as an alternative to TFS if you lack the size or resources at your current stage of development.</p><p>Below, I've outlined a few pieces of information that I found useful while setting up Subversion and integrating it into my Visual Studio instance.  This is by no means comprehensive, as you can find much more information and specific instructions for installation and use from Subversion directly.  Consider this the \"cliff-notes\" version.</p><h2>The Tools You Need</h2><ul><li><a href=\"http://www.open.collab.net/products/subversion/\" target=\"_blank\">CollabNet Subversion</a></li><li><a href=\"http://tortoisesvn.tigris.org/\" target=\"_blank\">Tortoise SVN</a></li><li><a href=\"http://ankhsvn.open.collab.net/\" target=\"_blank\">Ankh SVN</a></li></ul><a href=\"http://www.open.collab.net/products/subversion/\" target=\"_blank\"><img src=\"http://nbarger.files.wordpress.com/2010/01/logo_collabnet.gif\" alt=\"CollabNet Subversion\" style=\"border:0;float:right;\" /></a><h3>CollabNet Subversion</h3><p>CollabNet provides an \"enterprise-ready distribution of Subversion\".  It is simply another flavor of Subversion which is purported to be one of the most stable versions.  This provides the server and command-line client.</p><a href=\"http://tortoisesvn.tigris.org/\" target=\"_blank\"><img src=\"http://nbarger.files.wordpress.com/2010/01/tortoisesvn_logo.gif\" alt=\"Tortoise SVN\" style=\"border:0;float:right;\" /></a><h3>Tortoise SVN</h3><p>Tortoise SVN provides a graphical interface for using Subversion as a shell extension.  You simply install Tortoise SVN, right click on a folder and are provided with additional Subversion actions within the file context menu.  Additionally, you can use the Repo-Browser to open a File Explorer-like view of the source controlled files.</p><a href=\"http://ankhsvn.open.collab.net/\" target=\"_blank\"><img src=\"http://nbarger.files.wordpress.com/2010/01/ankhsvn.gif\" alt=\"Ankh SVN\" style=\"border:0;float:right;\" /></a><h3>Ankh SVN</h3><p>Ankh SVN is a Visual Studio plugin which can be added to integrate Subversion into Visual Studio (similar to TFS/Sourcesafe).</p><p>There are several tools available that you can use in place of these, but I've found these three work pretty smoothly for real-world use.</p><h2>Setting up a Repository</h2><p>Creating a repository once you have Tortoise SVN installed is very easy.  Create a folder in Windows, for example, c:\\svn; right click on the folder, in the context menu, inside TortoiseSVN, select \"Create repository here\".  See screenshot below.</p><p>This will automatically setup all of the directories and files necessary for a repository where you can begin adding source controlled files and projects to.</p><img src=\"http://nbarger.files.wordpress.com/2010/01/create_repository.gif\" alt=\"Create SVN Repository\" style=\"border:1px solid #000;\" /><h2>Making the Repository Available Online</h2><p>To allow your Subversion repository to be available remotely, you'll need to add it as a service on a hosting server.  You can do this by running the following command (change directory paths to match the location of subversion as well as the location of the repository) on your server.</p><pre>sc create svn binpath= \"\\\"c:\\program files\\collabnet subversion server\\bin\\svnserve.exe\\\"--service -rc:\\svn\" displayname= \"Subversion Server\"depend= Tcpip start= auto</pre><p>Kick off the service if it is not already running, by entering the following command line:</p><pre>sc start svn</pre><h2>Setting up Access/Authorization</h2><p>Once you create a repository, open the folder (c:\\svn), and open the \"conf\" folder to see the following files:</p><ul><li>authz</li><li>passwd</li><li>svnserve.conf</li></ul><h3>authz File</h3><p>The authz file contains a sample \"database\" of authorization rules which can be used by Subversion to limit access to users, groups, or aliases.  Let's take an example of two users, Bob and Susan.  First we need to add the users to the [users] section and assign them read/write (rw) access, as follows:</p><pre>[users]bob = rwsusan = rw</pre><p>Next, we'll need to modify the authz file to specify that all authenticated users have access to the repository; we do this with the following:</p><pre>[users]bob = rwsusan = rw[/]$authenticated = rw</pre><p><i>There are several additional examples and notes autogenerated within the authz file; you can learn quite a bit by playing around with these entries.</i></p><h4>Limiting Access to Specific Directories</h4><p>Let's now further restrict the repository so specific users will have access to certain areas, while others will not.  Bob will have full access to the entire repository, while Susan will have access to everything except a directory called \"private\".</p><p>Our repository directory will look like this:</p><pre>c:\\svnc:\\svn\\privatec:\\svn\\public</pre><p>In the authz file, we need to make an additional change to designate that only Bob has access to the private directory.  Here is our previous authz file with the new access rule; we've added the directory to which only Bob has access to.  The two criteria beneath the rule indicate to set access of '' (none) to everyone (*) which essentially blocks read/write access from all users.  We then add to that entry by saying Bob = rw (read/write access for Bob only) in the next line to allow Bob access.</p><pre>[users]bob = rwsusan = rw[/]$authenticated = rw[/private]* =bob = rw</pre><h3>passwd</h3><p>The passwd file contains a \"database\" of users and corresponding passwords.  Simply add your authenticated users and their passwords (one per line):</p><pre>[users]bob = password1susan = password2</pre><h3>svnserve.conf</h3><p>The svnserve.conf file contains several configuration settings for Subversion which you will need to modify to enable access control.</p><p>Here are the key entries that you should adjust: </p><pre>anon-access = noneauth-access = writepassword-db = passwdauthz-db = authzrealm = My Repository</pre><p>There are directions and examples in the svnserve.conf file that are generated when you create a repository.  The above example is pretty standard if you are going to allow multiple authenticated users to access your repository while keeping anonymous users out.</p><h2>Further Information</h2><p>You can find an abundance of documentation in the above links as well as at <a href=\"http://subversion.tigris.org/\" target=\"_blank\">http://subversion.tigris.org/</a>.  If you have any quick tips that you would like to share, please add them below in the comments.</p>"}