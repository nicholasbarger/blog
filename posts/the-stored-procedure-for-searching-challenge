{"id":"the-stored-procedure-for-searching-challenge","title":"The Stored Procedure for Searching Challenge","description":"","link":"http://nicholasbarger.com/2011/07/13/the-stored-procedure-for-searching-challenge/","pubDate":"2011-07-13T02:36:57.000Z","content":"<h2>The Problem</h2><p>You have a table chock full of good business data.  This data needs to be accessed by a host of potential search criteria and any combination of that search criteria.  What’s the most elegant way to right a stored procedure which accepts multiple parameters as search criteria but only returns the records that relate to the combination of search criteria and accommodates for nulls and empty strings as well.</p><h3>The Constraints</h3><ul><li>We want search criteria specified to match the record value in field</li><li>We want empty string to match empty or null records</li><li>We want null to not include the search criteria in the filter</li></ul><h3>The Setup</h3><p>A very basic table to begin with (let's call it TestingSqlSearchData for consistency):</p><table><tr><td><strong>ID</strong></td><td><strong>Name</strong></td></tr><tr><td>1</td><td>Nick</td></tr><tr><td>2</td><td>John</td></tr><tr><td>3</td><td>Mary</td></tr><tr><td>4</td><td><i>NULL</i></td></tr><tr><td>5</td><td>Casey</td></tr><tr><td>6</td><td>&nbsp;</td></tr></table><h3>A Solution (hopefully not “the” solution)</h3><div class=\"sql\"><pre>declare @Name varchar(50) = null; --(or 'ni' or '')select * from TestingSqlSearchDatawhere isnull(Name, '') LIKE (case when @Name = '' then '' else '%' end) + (case when @Name is null then isnull(Name, '') else @Name end) + (case when @Name = '' then '' else '%' end);</pre></div><p>This returns the following for each example:</p><h4>@Name = null</h4><table><tr><td><strong>ID</strong></td><td><strong>Name</strong></td></tr><tr><td>1</td><td>Nick</td></tr><tr><td>2</td><td>John</td></tr><tr><td>3</td><td>Mary</td></tr><tr><td>4</td><td><i>NULL</i></td></tr><tr><td>5</td><td>Casey</td></tr><tr><td>6</td><td>&nbsp;</td></tr></table><h4>@Name = 'ni'</h4><table><tr><td><strong>ID</strong></td><td><strong>Name</strong></td></tr><tr><td>1</td><td>Nick</td></tr></table><h4>@Name = ''</h4><table><tr><td><strong>ID</strong></td><td><strong>Name</strong></td></tr><tr><td>4</td><td><i>NULL</i></td></tr><tr><td>6</td><td>&nbsp;</td></tr></table><h3>The Challenge</h3><p>The challenge is quite simple; we want to demonstrate more elegant solutions to this SQL scenario.  You can use any SQL-based approach to accomplish this.  If anyone wants to take up the challenge you can submit your solutions (complete with an explanation as to <i>why</i> it is more elegant – as this is not always apparent to everyone else) in the comments below.</p><p>P.S. – I really hope to see some comments, so don’t be shy!  And, if no one comments, I’ll still leave the post up for at least one solution to this scenario.  Who’s going to win bragging rights?</p>"}