{"id":"common-reusable-business-entities-part-1","title":"Common Reusable Business Entities Part 1","description":"","link":"http://nicholasbarger.com/2009/03/11/common-reusable-business-entities-part-1/","pubDate":"2009-03-11T23:41:45.000Z","content":"<p>I noticed that several of my projects both for work and hobby tend to reuse certain common business entities.  A Name structure is pretty much always the same (A name is a name is a name... maybe that's a horse - nevermind the sidetrack.)  In most cases, these entities were needed without change or very little change and therefore made for a great base entity to build off of.</p><p>Here are a few common entities that you may like to begin building a library with.  You never know, it may save some time and build more consistency throughout several of your applications.</p><h2>PersonName Structure: What's in a Name?</h2><p>The PersonName structure specifies a person's name, including first, middle, and last as well as common prefix and suffix values.  It has built in formatting options that you may like to expand on.  Overall, all of the entities to be demonstrated in this short series are meant to be thin, without a lot of functionality or business logic.</p><div class=\"c_block\"><pre>public struct PersonName{    #region \"ENUMERATIONS\"    /// &lt;summary&gt;    /// The prefix to a persons name.    /// &lt;/summary&gt;    public enum PrefixType    {        [Description(\"~\")]        NONE,        [Description(\"Dr.\")]        DR,        [Description(\"Father\")]        FATHER,        [Description(\"Miss\")]        MISS,        [Description(\"Mr.\")]        MR,        [Description(\"Mrs.\")]        MRS,        [Description(\"Ms.\")]        MS,        [Description(\"Prof.\")]        PROF,        [Description(\"Rev.\")]        REV    }    /// &lt;summary&gt;    /// The suffix to a persons name.    /// &lt;/summary&gt;    public enum SuffixType    {        [Description(\"~\")]        NONE,        [Description(\"I\")]        I,        [Description(\"II\")]        II,        [Description(\"III\")]        III,        [Description(\"IV\")]        IV,        [Description(\"Jr.\")]        JR,        [Description(\"Sr.\")]        SR,        [Description(\"1st\")]        FIRST,        [Description(\"2nd\")]        SECOND,        [Description(\"3rd\")]        THIRD,        [Description(\"4th\")]        FOURTH,        [Description(\"D.D.S.\")]        DDS,        [Description(\"M.D.\")]        MD,        [Description(\"Ph.D.\")]        PHD    }    /// &lt;summary&gt;    /// The display format for a persons name.    /// &lt;/summary&gt;    public enum DisplayMode    {        //TODO: add any additional formats needed        LastFirstMiddle,        LastFirstMiddleInit,        LastFirst,        FirstMiddleLast,        FirstMiddleInitLast,        FirstLast    }    #endregion    #region \"PROPERTIES\"    /// &lt;summary&gt;    /// Persons first name.    /// &lt;/summary&gt;    public string First { get; set; }    /// &lt;summary&gt;    /// Persons middle name.    /// &lt;/summary&gt;    public string Middle { get; set; }    /// &lt;summary&gt;    /// Persons last name.    /// &lt;/summary&gt;    public string Last { get; set; }    private string _MiddleInit;    /// &lt;summary&gt;    /// Persons middle initial.    /// &lt;/summary&gt;    public string MiddleInit    {        get        {            if (string.IsNullOrEmpty(this._MiddleInit) == true)            {                if (string.IsNullOrEmpty(this.Middle) == false)                {                    return this.Middle.Substring(0, 1);                }                else                {                    return string.Empty;                }            }            else            {                return this._MiddleInit;            }        }        set        {            _MiddleInit = value.Substring(0, 1);        }    }    /// &lt;summary&gt;    /// Persons name prefix (Mr., Mrs., Ms., etc.)    /// &lt;/summary&gt;    public PrefixType? Prefix { get; set; }    /// &lt;summary&gt;    /// Persons name suffix (Jr., Sr., etc.)    /// &lt;/summary&gt;    public SuffixType? Suffix { get; set; }    #endregion    #region \"CONSTRUCTORS\"    /// &lt;summary&gt;    /// PersonName constructor.    /// &lt;/summary&gt;    public PersonName(string first, string last)        : this()    {        First = first;        Last = last;    }    public PersonName(PrefixType? prefix, string first, string middle, string last, SuffixType? suffix)        : this()    {        Prefix = prefix;        First = first;        Middle = middle;        Last = last;        Suffix = suffix;    }    #endregion    #region \"METHODS\"    /// &lt;summary&gt;    /// Overrides ToString() to display default name format (Last, First Middle).    /// &lt;/summary&gt;    /// &lt;returns&gt;&lt;/returns&gt;    public override string ToString()    {        return String.Format(\"{0}, {1} {2}\", this.Last, this.First, this.Middle);    }    /// &lt;summary&gt;    /// Additional ToString() to display name by specified format.    /// &lt;/summary&gt;    /// &lt;param name=\"dm\"&gt;&lt;/param&gt;    /// &lt;returns&gt;&lt;/returns&gt;    public string ToString(DisplayMode dm)    {        //TODO: add all the rest of the formats needed here        switch (dm)        {            case DisplayMode.LastFirstMiddleInit:                return string.Format(\"{0}, {1} {2}\", this.Last, this.First, this.MiddleInit);                break;            case DisplayMode.LastFirst:                return string.Format(\"{0}, {1}\", this.Last, this.First);                break;            case DisplayMode.FirstMiddleLast:                return string.Format(\"{0} {1} {2}\", this.First, this.Middle, this.Last);                break;            case DisplayMode.FirstMiddleInitLast:                return string.Format(\"{0} {1} {2}\", this.First, this.MiddleInit, this.Last);                break;            case DisplayMode.FirstLast:                return string.Format(\"{0} {1}\", this.First, this.Last);                break;            default:                return ToString();                break;        }    }    #endregion}</pre></div><h3>What's Next?</h3><p>I'll cover an Address structure in the next part, so feel free to come back and check it out.  Also, please feel free to add any requests for specific common entities or add your own in the comments below.</p>"}