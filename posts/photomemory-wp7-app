{"id":"photomemory-wp7-app","title":"PhotoMemory WP7 App","description":"","link":"http://nicholasbarger.com/2011/01/25/photomemory-wp7-app/","pubDate":"2011-01-25T03:28:59.000Z","content":"<h2>The Basic Outline of Functionality</h2><ol><li>Choose the difficulty mode to play in.</li><li>Clear default picture values used in development.</li><li>Set the board up based on the difficulty mode.</li><li>Get personal photos from the phone.</li><li>Shuffle photos and select appropriate number based on difficulty mode.</li><li>Create pairs and shuffle all cards/photos.</li><li>Display unturned cards and any already matched photos.</li><li>Choose card and determine matches.</li><li>Track number of moves and time.</li><li>Display winner once all cards are matched.</li></ol><img src=\"http://nbarger.files.wordpress.com/2011/01/photomemory1.jpg\" alt=\"PhotoMemory WP7 App\" /><h2>The Game Board (XAML)</h2><p>The game board is basically a grid with several cells to hold the gradient cards or overturned photos.  At the bottom, I keep track of number of moves and time expired.</p><div class=\"html_block\"><pre>&lt;Grid&gt;        &lt;Grid.RowDefinitions&gt;            &lt;RowDefinition Height=\"*\" /&gt;            &lt;RowDefinition Height=\"Auto\" /&gt;        &lt;/Grid.RowDefinitions&gt;        &lt;toolkit:WrapPanel Grid.Row=\"0\" x:Name=\"LayoutPanel\" HorizontalAlignment=\"Stretch\" VerticalAlignment=\"Stretch\"&gt;            &lt;Image Source=\"Images/1.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/2.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/3.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/6.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/4.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/1.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/2.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/7.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/8.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/5.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/9.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/3.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/4.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/6.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/7.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/8.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/9.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;            &lt;Image Source=\"Images/5.jpg\" Width=\"150\" Margin=\"5\"&gt;&lt;/Image&gt;        &lt;/toolkit:WrapPanel&gt;        &lt;StackPanel Grid.Row=\"1\" Orientation=\"Horizontal\"&gt;            &lt;TextBlock Text=\"Moves:\"&gt;&lt;/TextBlock&gt;            &lt;TextBlock x:Name=\"MovesLabel\" Foreground=\"Yellow\" Text=\"0\" Margin=\"10,0,0,0\"&gt;&lt;/TextBlock&gt;            &lt;TextBlock Text=\"Time:\" Margin=\"50,0,0,0\"&gt;&lt;/TextBlock&gt;            &lt;TextBlock x:Name=\"TimeLabel\" Foreground=\"Yellow\" Text=\"0 seconds\" Margin=\"10,0,0,0\"&gt;&lt;/TextBlock&gt;        &lt;/StackPanel&gt;    &lt;/Grid&gt;</pre></div><img src=\"http://nbarger.files.wordpress.com/2011/01/photomemory2.jpg\" alt=\"PhotoMemory WP7 App\" /><h2>Highlighting a Few Areas of Development</h2><h3>Get Photos</h3><p>A large part of the charm in this simple application is that it uses your own photos as the cards to match.  I had pictures of my daughter and some wildlife we had taken while on a hiking trip (as well as some stock images that came with Windows 7) in my phone when I developed this app.  Below is code to retrieve the photos from your phone – stored in MediaLibrary.</p><div class=\"c_block\"><pre>private List GetPhotos()        {            //Get photos from phone            List photos = new List();            var library = new MediaLibrary();            var pics = library.Pictures.ToArray();            //Shuffle user pics            pics.Shuffle();            //Loop through photos and add to game collection            foreach (var pic in pics)            {                BitmapImage bmp = new BitmapImage();                bmp.SetSource(pic.GetThumbnail());                photos.Add(bmp);            }            //Check if enough photos are available            if (photos.Count &lt; _tileCount / 2)            {                //Setting default images if user does not have enough pictures of their own                photos.Add(new BitmapImage(new Uri(&quot;Images/1.jpg&quot;, UriKind.Relative)));                photos.Add(new BitmapImage(new Uri(&quot;Images/2.jpg&quot;, UriKind.Relative)));                photos.Add(new BitmapImage(new Uri(&quot;Images/3.jpg&quot;, UriKind.Relative)));                photos.Add(new BitmapImage(new Uri(&quot;Images/4.jpg&quot;, UriKind.Relative)));                photos.Add(new BitmapImage(new Uri(&quot;Images/5.jpg&quot;, UriKind.Relative)));                photos.Add(new BitmapImage(new Uri(&quot;Images/6.jpg&quot;, UriKind.Relative)));                photos.Add(new BitmapImage(new Uri(&quot;Images/7.jpg&quot;, UriKind.Relative)));                photos.Add(new BitmapImage(new Uri(&quot;Images/8.jpg&quot;, UriKind.Relative)));                photos.Add(new BitmapImage(new Uri(&quot;Images/9.jpg&quot;, UriKind.Relative)));                photos.Add(new BitmapImage(new Uri(&quot;Images/10.jpg&quot;, UriKind.Relative)));                photos.Add(new BitmapImage(new Uri(&quot;Images/11.jpg&quot;, UriKind.Relative)));                photos.Add(new BitmapImage(new Uri(&quot;Images/12.jpg&quot;, UriKind.Relative)));                //Shuffle newly added photos as well                photos.Shuffle();            }                        return photos;        }</pre></div><h3>Display Cards</h3><p>This is the initial generation of the cards (gradients) and their corresponding actions once a user clicks on them.</p><div class=\"c_block\"><pre>private void DisplayCards()        {            foreach (var card in _collection.Cards)            {                var rect = new System.Windows.Shapes.Rectangle()                {                    Fill = new LinearGradientBrush(new GradientStopCollection()                        {                            new GradientStop()                            {                                Color = \"#FF003366\".ToColor(),                                Offset = 0                                                            },                            new GradientStop()                            {                                Color = \"#FF208FFF\".ToColor(),                                Offset = 1                            },                        }, 45                    )                    {                        MappingMode = BrushMappingMode.RelativeToBoundingBox                    },                    Height = _cardHeight,                    Margin = new Thickness(_margin),                    Name = string.Format(\"rect_{0}\", card.ID),                    Stroke = new SolidColorBrush(Colors.White),                    StrokeThickness = 2,                    Width = _cardWidth,                    Visibility = System.Windows.Visibility.Visible                };                rect.MouseLeftButtonUp += new MouseButtonEventHandler(ChooseCard);                LayoutPanel.Children.Add(rect);                var img = new Image()                {                    Height = _cardHeight,                    HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch,                    Margin = new Thickness(_margin),                    Name = string.Format(\"card_{0}\", card.ID),                    Source = card.Bitmap,                    Width = _cardWidth,                    VerticalAlignment = System.Windows.VerticalAlignment.Stretch,                    Visibility = System.Windows.Visibility.Collapsed                };                                LayoutPanel.Children.Add(img);            }        }</pre></div><h3>Play a SoundEffect</h3><p>This code snippet is all over the place on the internet and WP7 forums, but I thought I would include it here for completeness.  In PhotoMemory, I play sound effects both in match and non-match scenarios and at the end when all cards are matched for a fun little “triumph”.</p><div class=\"c_block\"><pre>//Play failure sound                            var snd = SoundEffect.FromStream(TitleContainer.OpenStream(\"Sounds/failed.wav\"));                            snd.Play();</pre></div><h3>Navigate to Another Page</h3><p>Again, another simple snippet but this simply shows a way to navigate to another page within WP7 Silverlight.</p><div class=\"c_block\"><pre>this.NavigationService.Navigate(new Uri(\"/Game.xaml?mode=\" + mode, UriKind.Relative));</pre></div><h3>Create and Use a DispatchTimer</h3><p>Timers are very important in game/mobile development and using a DispatchTimer appears to be the simplest way to do it.  Here I create a timer, set some variables such as the duration and what eventhandler to call, and then start the timer.  After the timer has expired, the event is raised and I reset the flipped cards.</p><div class=\"c_block\"><pre>DispatcherTimer _cardTimer;//Need to pause for 1 second before flipping back                            _cardTimer = new DispatcherTimer();                            _cardTimer.Interval = TimeSpan.FromSeconds(1);                            _cardTimer.Tick += new EventHandler(FinishStudyingCards);                            _cardTimer.Start();void FinishStudyingCards(object sender, EventArgs e)        {            //Stop timer            _cardTimer.Stop();            //Flip cards back down after finished viewing            FlipCard(_firstCard, FlipDirection.Down);            FlipCard(_secondCard, FlipDirection.Down);            //Allow user to try again            _firstCard = null;            _secondCard = null;            _lock = false;        }</pre></div><img src=\"http://nbarger.files.wordpress.com/2011/01/photomemory3.jpg\" alt=\"PhotoMemory WP7 App\" /><h2>Submission</h2><p>I would like to have a link to the application on Zune, however, because of complications with Microsoft my submission is still pending after more than a month.  You can bet I will be writing a post on the submission process as well.  Good luck, and have fun developing WP7 apps of your own!</p>"}