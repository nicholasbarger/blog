{"id":"non-web-referenced-webservices-in-vb.net","title":"Non-Web Referenced Webservices in VB.NET","description":"","link":"http://nicholasbarger.com/2008/06/13/non-web-referenced-webservices-in-vb-net/","pubDate":"2008-06-13T13:51:04.000Z","content":"<p>Webservices are extremely common in modern day web-based development.  Especially with the emergence of AJAX and <i>mashup-style</i> development.  You can call webservices in a variety of ways, a few include:</p>    <ul>        <li>Javascript and AJAX Script Manager (see <a href=\"http://nbarger.wordpress.com/2008/06/07/a-recipe-for-ajax-webservices/\">A Recipe for AJAX Webservices</a>)</li>        <li>Web References (by adding a project web reference through Visual Studio)</li>        <li>Ad-hoc (through server-side code, and will be the content for this article)</li>    </ul>        <h2>Ad-hoc Webservices</h2>    <p>There are always instances where you want to use differing methods for producing the same results.  In this case, we want to be able to access data from a webservice in a server-side environment and possibly perform some actions upon the data that exceed the realm of javascript or similar clientside scripting language.</p>        <h3>Weather Webservice Example</h3>    <p>For the purpose of demonstration, I'm going to use a random webservice I had in some old code that retrieves the weather conditions for a specific geographical area (city/country).  (hopefully, at the time you read this the webservice is still active and free).</p>    <p>The url for the webservice ASMX is the following: <a href=\"http://www.webservicex.net/globalweather.asmx\" target=\"_blank\">http://www.webservicex.net/globalweather.asmx</a>.</p>            <h4>HTML Display for the Results</h4>    <p>We need to display the result that the webservice returns, we'll do this in a very simple way:</p>    <div class=\"html_block\">    <pre>Weather Condition: &lt;asp:Label ID=\"lblWeatherCondition\" runat=\"server\"&gt;&lt;/asp:Label&gt;</pre>    </div>        <h4>Time to Wire Up the Webservice Code</h4>    <p>This is <i><b>one</b></i> way to wire up this webservice.  There are other ways as well, please feel free to leave comments on additional improvements to this method.</p>    <p><i>Note: The data returned by this webservice appears to wrap data returned from another webservice (probably not the best example to use, but this happens in the real world).  So I'm actually doing a little extra digging by adding a second XMLDocument that references the XML we care about.</i></p>    <div class=\"vb_block\">    <pre>Private Sub getWeatherService()    'Get Webservice URL (Add parameters based on city/country)    Dim strURL As String = String.Format(\"http://www.webservicex.net/globalweather.asmx/GetWeather?CityName={0}&amp;CountryName={1}\", \"New York\", \"United States\")    'Create original XML document (this could also be an xmltextreader) - usually this is end of step, but this webservice is crap and needs two    Dim XMLDoc As New XmlDocument()    XMLDoc.Load(strURL)    'Get true XML for webservice we care about    Dim strXML As String = XMLDoc.ChildNodes(1).ChildNodes(0).InnerText    'Load new XML document with appropriate XML content    XMLDoc = New XmlDocument()    XMLDoc.LoadXml(strXML)    'Pull out XML inner text (should be value, but spaces inappropriately exist) - uses XPATH    Dim strWeatherCondition As String = XMLDoc.SelectSingleNode(\"/CurrentWeather/SkyConditions\").InnerText    'Assign value to label - duh.    lblWeatherCondition.Text = strWeatherConditionEnd Sub</pre>    </div>        <p>You can now place this webservice call wherever you need to trigger the event.</p>        <h4>Extra!</h4>    <p>Demonstrations and articles often stop well short of real-world application.  Please feel free to take this example and build on it to do several other actions after receiving the data.  For example, you could:</p>    <ul>        <li>...use the value to display a corresponding image for the weather to graphical represent the data.</li>        <li>...use the value to pass into more detailed information to return historical data for similar conditioned days, or more detailed information such as barometric pressure, rainfall expectations, etc.</li>        <li>...use the value to redirect the user to different areas of the website or change graphical themes by replacing CSS files or switching Themes in .NET.</li>        <li><i>...use the value to do whatever your creative mind comes up with.</i></li>    </ul>         <p>Please leave me comments on some of the additional applications you come up with; have working examples, leave the link so we can all check them out!</p>"}