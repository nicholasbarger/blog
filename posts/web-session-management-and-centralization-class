{"id":"web-session-management-and-centralization-class","title":"Web Session Management and Centralization Class","description":"","link":"http://nicholasbarger.com/2009/01/13/web-session-management-and-centralization-class/","pubDate":"2009-01-13T19:13:05.000Z","content":"<p>For most web-based applications, developers employ some type of session-based data store/access.  It's fairly common practice to use session to pass data back and forth for the duration of a user's visit, especially when that data is not completely persistent, as in the case of storing data directly back to the database.</p>    <p>Because this is such common practice, when reviewing code, I often find that developers simply access session whenever they need it from whichever page they are calling/saving from.  Though this is probably the easiest way to do things it can get pretty messy.</p>    <p>Check out the following example of what I'm talking about:</p>        <h2>A Messy, But Common Example of Session Usage</h2>    <p><strong>login.aspx.cs</strong></p>        <div class=\"c_block\"><pre>protected void btnSubmit_Click(object sender, ImageClickEventArgs e){    bool result = SomeBusinessEntity.CheckLogin(tbEmail.Text, tbPassword.Text);    if (result)    {        //Add some values to session to be used later in the web-application        Session.Add(“SomeSessionData”, “SomeSessionValue”);        //do the rest of code you may want to call...    }    else    {        //provide notification of failed login    }}</pre></div>   <p><strong>memberonly.aspx.cs</strong></p>      <div class=\"c_block\"><pre>protected void Page_Load(object sender, EventArgs e){    //Check the session value to customize this page (or maybe, see if user is allowed access)    string sessionValue = string.Empty;    try     {        if (string.IsNullOrEmpty(Session[\"SomeSessionValue\"].ToString()))        {            //kick user out of page        }        else        {            //customize page with logic pertaining to the value stored in session        }    }    catch    {        //kick user out of page    }}</pre></div>    <p>There are several potential issues with writing code like this.  First, code is scattered throughout the web application and it is inheritently decentralized making maintenance and debugging potentially difficult.  Second, session values are stored in magic strings, meaning, that if another developer goes to use this session value, they need to know what string they need to request and if by chance they mistype it, they're in trouble. </p>    <p><i>Note: There are additional issues with the above example, but for the purpose of this demo I'm going to focus just on these specific issues.</i></p>        <h2>Implementing a Web Session Manager Class</h2>    <p>Here's the same code using a Web Session Manager class that we will create at the web application level.</p>        <div class=\"c_block\"><pre>protected void btnSubmit_Click(object sender, ImageClickEventArgs e){    bool result = SomeBusinessEntity.CheckLogin(tbEmail.Text, tbPassword.Text);    if (result)    {        //Add some values to session to be used later in the web-application        //NOTICE THE STRONGLY TYPED REFERENCE        WebSession.SomeSessionData = “SomeSessionValue”;        //do the rest of code you may want to call...    }    else    {        //provide notification of failed login    }}</pre></div>    <p><strong>memberonly.aspx.cs</strong></p>        <div class=\"c_block\"><pre>protected void Page_Load(object sender, EventArgs e){    //Check the session value to customize this page (or maybe, see if user is allowed access)    //NOTICE THE USE OF DATATYPES HERE AND ENCAPSULATING LOGIC TO ASSESS WHETHER THE SESSION VALUE EXISTS    string sessionValue = WebSession.SomeSessionData;    if (string.IsNullOrEmpty(sessionValue))    {        //kick user out of page    }    else    {        //customize page with logic pertaining to the value stored in session    }}</pre></div>    <p><strong>WebSession.cs</strong></p>        <div class=\"c_block\"><pre>/// &lt;summary&gt;/// Access SomeSessionData which describes what a logged in user's favorite color is./// &lt;/summary&gt;public static string SomeSessionData{    get    {        HttpContext context = HttpContext.Current;        string sessionValue = string.Empty;        if (context.Session[\"SomeSessionData\"] != null)        {            sessionValue = context.Session[\"SomeSessionData\"].ToString();        }        return sessionValue;    }    set    {        HttpContext context = HttpContext.Current;        context.Session.Add(\"SomeSessionData\", value);    }}</pre>    </div>    <p>It's different but not too drastically; so what did we gain from this?</p>    <p>Well, we've added a WebSession class which contains static methods that now house ALL session based information in a single area.  We can readily access session values through static calls, make updates to session based content or logic through a single-point of entry, provide strongly typed access to that session information to help ourselves and our fellow developers, and finally, even provide intellisense hints through sandcastle notation (the triple “/” comments at the top of SomeSessionData).</p>    <p>Remember, this is a small demo example; imagine this on a much grander scale where you have possibly hundreds of pages each with their own implementations of directly calling the Session collection!  Not good my friends.</p>    <p>Hope this short article on developing and implementing a Web Session Manager class helps!</p><p>P.S. - <strong>Go Gators!  2008-2009 National Football Champions!</strong></p><img src=\"http://nbarger.files.wordpress.com/2010/01/gator_logo.jpg\" alt=\"University of Florida\" />"}