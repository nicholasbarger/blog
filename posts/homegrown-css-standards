{"id":"homegrown-css-standards","title":"Homegrown CSS Standards","description":"","link":"http://nicholasbarger.com/2009/01/16/homegrown-css-standards/","pubDate":"2009-01-16T19:21:25.000Z","content":"<p>The following is a brief outline of a few tips, tricks, and personal preferences for standardizing your HTML/CSS websites and web applications.  These suggestions have been pulled from personal experience and tend to fit 99% of the projects I’ve been involved in.  Remember, even though I’m calling them <i>standards</i>, there are always exception, so don’t simply mimic any set of standards – evaluate the situation and apply the most appropriate solution.</p><h2>Good Foundations</h2><p>It is generally easier to begin style implementation with div’s.  A CSS-based HTML design typically will have appropriately used div’s to section off major groupings of HTML data.  For example:</p><div class=\"html_block\"><pre>…&lt;body&gt;&lt;div class=”container”&gt;\t&lt;div class=”header”&gt;\t\t&lt;h1&gt;My Example HTML&lt;/h1&gt;\t&lt;/div&gt;\t&lt;div class=”nav”&gt;\t\t&lt;ul&gt;\t\t\t&lt;li&gt;Microsoft&lt;/li&gt;\t\t\t&lt;li&gt;Yahoo&lt;/li&gt;\t\t&lt;/ul&gt;\t&lt;/div&gt;\t&lt;div class=”content”&gt;\t\t&lt;h2&gt;My Example Subheader&lt;/h2&gt;\t\t&lt;p&gt;Some lorem ipsum goes here…&lt;/p&gt;\t\t&lt;p&gt;And now a bit more…&lt;/p&gt;\t&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;…</pre></div><p>As you can see, there are no tables being used for design purposes, table should generally be used for tabular data and not design layout.  HTML with heavily used tables limits the ability for design to be fully manipulated by a CSS style sheet.</p><p>Now that we’ve written HTML that is geared to a CSS-based design, we can use the “hooks” we created to manipulate the CSS however we need and it will be readable for both an HTML designer/developer and a CSS developer.</p><p>For an example of design being completely dictated by CSS see <a href=\"http://csszengarden.com/\" target=\"_blank\">CSSZenGarden</a> for more.  The HTML is always the same and only the CSS file changes in each example.</p><p>HTML that is developed in Visual Studio under the default validation settings for HTML will provide warnings/errors of invalid or inappropriate HTML.  Please heed these warnings to provide the cleanest amount of HTML to work from.  This is the foundation of any web application and for all other aspects such as CSS, JavaScript, and even code-behind to function properly, HTML should be sound. After all warnings have been addressed through Visual Studio, take time to also validate the HTML in an <a href=\"http://validator.w3.org/\" target=\"_blank\">HTML Validator</a> provided by <a href=\"http://www.w3.org\" target=\"_blank\">W3 Consortium</a>.</p><h2>CSS File Organization</h2><p>When developing a hierarchy of style sheets, separate styles into common and specific categories, then create a common.css file to store all common styles and individual specific CSS files for other major collections of CSS styles.  See below example:</a><p>If I have a website that consists of three major portals, Public, Vendors, Administration; I would most likely create four CSS style sheets; one for each major portal, as well as one common.css file for common styles used in all portals.</p><h3>Example: Use of Multiple Cascading Style Sheets</h3><div class=\"css_block\"><pre>Common.cssa img {border: none;}Public.css@import url(“common.css”);body {background-color: #CCC;}Vendors.css@import url(“common.css”);body {background-color: #AAA;}Administration.css@import url(“common.css”);body {background-color: #FFF;}</pre></div><p>This allows us to gain the true benefits of “cascading” style sheets, as each style sheet is importing and thus inheriting (or overloading, when appropriate) the parent style sheet(s).</p><p>Use discretion as to the number of CSS files to import against.  In most cases, there is only need for a single import per CSS file.  Several imports can become unwieldy and difficult to track down CSS class inheritance.</p><h2>CSS Formatting</h2><p>When adding CSS styles to a CSS style sheet, format the document in the following general sections:</p><p><i>Import CSS file(s)<br />HTML overloads<br />Custom CSS styles</i></p><h3>Example: External CSS Sample</h3><div class=\"css_block\"><pre>Example.cssimport url(“common.css”);body {background-color: #FFFFCC;}input, textarea, select {background-color: #FFFFAA;}/*Content found within the main content placeholder.*/.content {padding: 15px;}/*Main navigation section.*/.nav {border: 1px solid #000;}.nav ul {list-style-type: none;}.nav ul li {margin-left: 10px;margin-right: 10px;}</pre></div><p>All HTML overloads are located first and grouped together, and custom styles make up the rest of the document.  Notice, that all custom styles have comments as to what they affect to assist in maintaining changes.  HTML overloads can have comments as well, but are not really necessary.  Additionally, styles either as HTML overloads, or custom, that are cascading within a document should be grouped together without vertical spacing as demonstrated with “.nav”. <strong>Please note that there are no CSS styles applied to ID elements!</strong> These are commonly used as follows:</p><h3>Example: CSS Style Based on Element ID</h3><div class=\"css_block\"><pre>#nav {padding: 15px;}</pre></div><p>The reason for this is that we want only class declarations in the HTML because it specifically tells the HTML observer (developer) that this object/tag has a CSS style applied to it, whereas the use of CSS against an ID tag does not convey this.  When CSS is complex and uses repositioning or floats, etc. this can become very difficult to identify where HTML issues are occurring verses applied CSS.  ID tags in HTML should be used for identification of objects/tags (for use with javascript/codebehind, etc.) and not for CSS styling.</p><h2>Miscellaneous Formatting</h2><p>Use spaces to enhance readability such as the following:</p><div class=\"css_block\"><pre>Bad:.nav{background-color:#000000;}.header{padding:10px;}Good:.nav {background-color: #000000;}.header {padding: 10px;}</pre></div><p>Always terminate style attributes with a semi-colon, even when there is only one style attribute being applied.</p><p>Explicitly write out style attributes for less-common or hard to read attribute values instead of combining them into a single line:</p><h3>Example(s): Readability</h3><div class=\"css_block\"><pre>Bad:padding: 10px 5px 10px 5px;Good:padding-top: 10px;padding-right: 5px;padding-bottom: 10px;padding-left: 5px;</pre></div><p>Additionally, when managing page layout widths, adjust widths from the highest containing item possible rather than specific nested objects.  See the following HTML/CSS example:</p><div class=\"html_block\"><pre>…&lt;body&gt;&lt;div class=\"container\"&gt;\t&lt;div class=\"header\"&gt;This is the header!&lt;/div&gt;\t&lt;div class=\"nav\"&gt;\t\t&lt;ul&gt;\t\t\t&lt;li&gt;Link 1&lt;/li&gt;\t\t\t&lt;li&gt;Link 2&lt;/li&gt;\t\t&lt;/ul&gt;\t&lt;/div&gt;\t&lt;div class=\"content\"&gt;\t\t&lt;p&gt;Here is some content.&lt;/p&gt;\t&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;…</pre></div><div class=\"css_block\"><pre>CSS:Bad:.header {width: 780px;}.nav {width: 780px;}.content {width: 780px;}Good:.container {width: 780px;}</pre></div><h2>CSS Style Naming</h2><p>Some common things to remember while naming styles:</p><ul><li>Avoid using names which are too specific to the styles being applied, for example: “bluetext” or “leftNav”.  Today you may be developing the text to be blue, or the navigation to be on the left, but tomorrow the text may change to green and the navigation may be right or top of the page.</li><li>Use consistent naming convention: Florida Family will be using camel case (“mainNav” or “nav”).</li><li>Don’t use acronyms or uncommon abbreviations such as “hlsm” (highlighted sub-menu).</li><li>Attempt to keep names fairly short, generally less than 15 characters.</li>.<li>Do not prefix CSS styles with “css” such as “cssNav”.</li></ul><h2>CSS Validation</h2><p>Don't forget, it's never a bad idea to validate your CSS (<a href=\"http://jigsaw.w3.org/css-validator/\" target=\"_blank\">W3 CSS Validator</a>)!<p>Thanks for reading, I hope this makes life a little easier when working with your HTML/CSS projects!</p>"}