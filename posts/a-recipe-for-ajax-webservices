{"id":"a-recipe-for-ajax-webservices","title":"A Recipe for AJAX Webservices","description":"","link":"http://nicholasbarger.com/2008/06/07/a-recipe-for-ajax-webservices/","pubDate":"2008-06-07T13:45:28.000Z","content":"<p>This is a fun and useful concept that is actually really very easy to implement.  The recipe calls for two cups webservice, an ounce of AJAX ScriptManager, finished with a dash of javascript.</p>    <p><i>Note: Begin with an AJAX Enabled Website!</i></p>        <h2>Let's Start With the Webservice</h2>    <p>Obviously, to work with AJAX Webservices you need to start with a webservice.  You can use any webservice that you like depending on the application; for the purpose of this demonstration our objective will be to retrieve a list of employees and their job application (sort of).</p>    <p>Instead of working with SQL to retrieve the data, I am going to simulate this process and then write everything into XML format to make it easier to work with in javascript.  Under normal conditions, I would be retrieving information from a database, otherwise the webservice would be a bit pointless.</p>    <p>Below is the pseudo-code to setup our mock webservice:</p>    <div class=\"vb_block\">    <pre>&lt;WebMethod()&gt; _    Public Function getData() As String        Dim dt As New DataTable        Dim dr As DataRow        Dim dc As DataColumn        dc = New DataColumn        dc.ColumnName = \"Name\"        dc.DataType = GetType(String)        dt.Columns.Add(dc)        dc = New DataColumn        dc.ColumnName = \"Occupation\"        dc.DataType = GetType(String)        dt.Columns.Add(dc)        dr = dt.NewRow()        dr(\"Name\") = \"Nicholas B\"        dr(\"Occupation\") = \"Computer Geek\"        dt.Rows.Add(dr)        dr = dt.NewRow()        dr(\"Name\") = \"Logan B\"        dr(\"Occupation\") = \"Jon-boat Captain\"        dt.Rows.Add(dr)        dr = dt.NewRow()        dr(\"Name\") = \"Ben G\"        dr(\"Occupation\") = \"Aspiring Computer Geek\"        dt.Rows.Add(dr)        dr = dt.NewRow()        dr(\"Name\") = \"David M\"        dr(\"Occupation\") = \"Pool Shark\"        dt.Rows.Add(dr)        dr = dt.NewRow()        dr(\"Name\") = \"Eric V\"        dr(\"Occupation\") = \"Inventory Terminator\"        dt.Rows.Add(dr)        Return getDataXML(dt)    End Function        Public Function getDataXML(ByVal dt As DataTable) As String        Try            If dt.Rows.Count &gt; 0 Then                Dim sb As New StringBuilder                sb.Append(\"&lt;?xml version=\"\"1.0\"\" encoding=\"\"iso-8859-1\"\"?&gt;\")                sb.Append(\"&lt;crew&gt;\")                Dim array(dt.Rows.Count - 1) As Double                For i As Integer = 0 To dt.Rows.Count - 1                    sb.Append(\"&lt;person&gt;\")                    sb.Append(\"&lt;name&gt;\" &amp; dt.Rows(i).Item(\"Name\") &amp; \"&lt;/name&gt;\")                    sb.Append(\"&lt;occupation&gt;\" &amp; dt.Rows(i).Item(\"Occupation\") &amp; \"&lt;/occupation&gt;\")                    sb.Append(\"&lt;/person&gt;\")                Next                sb.Append(\"&lt;/crew&gt;\")                Return sb.ToString()            Else                Return Nothing            End If        Catch ex As Exception            Return Nothing        End Try    End Function</pre>    </div>    <p>The getDataXML() function is just to help move the datatable format into XML in the schema that I want for this demo. The key here is that you have a webservice and it is doing something (in this case returning a list of employees in XML format).</p>    <h3>A Secret Ingredient</h3>    <p>There is one last secret ingredient that needs to go into your webservice.  You need the following line above your webservice class declaration:</p>    <div class=\"vb_block\">    <pre>&lt;System.Web.Script.Services.ScriptService()&gt; _</pre>    </div>    <p>This line enables the webservice to be called from javascript and is <b>required</b>.</p>        <h2>A Bit of AJAX Script Manager</h2>    <p>Next we need to register the script manager and script manager proxy.  Take a look at the following code, which goes in the HTML:</p>    <div class=\"html_block\">    <pre>&lt;asp:ScriptManager ID=\"ScriptManager1\" runat=\"server\" /&gt;        &lt;asp:ScriptManagerProxy id=\"ScriptManagerProxy1\" runat=\"server\"&gt;    &lt;Services&gt;          &lt;asp:ServiceReference Path=\"~/webservice_demo.asmx\" /&gt;    &lt;/Services&gt;    &lt;Scripts&gt;        &lt;asp:ScriptReference Path=\"~/javascript_demo.js\" /&gt;    &lt;/Scripts&gt;    &lt;/asp:ScriptManagerProxy&gt;        &lt;input type=\"button\" value=\"Get Data\" onclick=\"getDataJS();\" /&gt;</pre>        &lt;div id=\"crew\"&gt;&nbsp;&lt;/div&gt;    </div>    <p><i>\"~/webservice_demo.asmx\"</i> is the location of my webservice file and <i>~/javascript_demo.js\"</i> is the location of my external javascript file (which we haven't covered yet).</p>    <p>The input button is just going to be our trigger to execute the AJAX webservice call; this could be any event-based trigger.  The div tag (crew) is just a container to hold our results when they are returned.</p>        <h2>Our Dash of Javascript (Maybe a Bit More than a Dash)</h2>    <div class=\"js_block\">    <pre>//Get all locations from webservice getLocationInfoByUser()function getDataJS() {    var ret = webservice_demo.getData(getDataJS_Complete, onError, onTimeout);    return true;}function getDataJS_Complete(arg) {    // code for IE    if (window.ActiveXObject) {        var doc=new ActiveXObject(\"Microsoft.XMLDOM\");        doc.async=\"false\";        doc.loadXML(arg);    }    // code for Mozilla, Firefox, Opera, etc.    else {        var parser=new DOMParser();        var doc=parser.parseFromString(arg,\"text/xml\");    }        // documentElement always represents the root node    var x=doc.documentElement;        var htmlstring = \"\";        for(i=0;i&lt;x.childNodes.length;i++) {        var name = x.childNodes[i].childNodes[0].childNodes[0].nodeValue;        var occupation = x.childNodes[i].childNodes[1].childNodes[0].nodeValue;                htmlstring += \"&lt;p&gt;\" + name + \"&nbsp;\" + \"(\" + occupation + \")&lt;/p&gt;\";    }        document.getElementById(\"crew\").innerHTML = htmlstring;}function onError(arg) {    alert(\"Error\");}function onTimeout(arg) {    alert(\"Timeout\");}</pre>    </div>    <p>Let's walk through the javascript a bit.  First, getDataJS() is being called from our button onclick event.  It simply calls our proxy webservice.  Notice, our webservice doesn't have the additiona onComplete, onError, onTimeout parameters.  These parameters were added by the proxy as all webservices being called through the AJAX Script Manager needs to account for errors, timeouts, and successes.</p>    <p>The next function, getDataJS_Complete() gets executed if a sucessful call to the webservice is made.  The code that we added loops through the XML and builds a simple listing of the results returned.  It then passes those results into a div we had on the page.</p>    <p>We've taken a pretty cheap way out of the error and timeout handling.  You can get creative with what happens upon errors; this is pretty standard just to show there was a timeout or there was an error with the webservice.</p>        <h2>Bon Apetit</h2>    <p>So, without a whole lot of pain we've created an AJAX webservice that we can call in our webpages.  Hope this helps!</p>"}