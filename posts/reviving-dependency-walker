{"id":"reviving-dependency-walker","title":"Reviving Dependency Walker","description":"","link":"http://nicholasbarger.com/2011/04/28/reviving-dependency-walker/","pubDate":"2011-04-28T01:04:11.000Z","content":"<p>If you haven't noticed, I am a big fan of reviving the fanfare of some of the older development tools that are out there.  Of course, there are constantly new tools released to help developers work smarter, faster, and more effectively – but often with all of the excitement over these new tools we forget about old standbys.</p><p>Dependency Walker is a tool that when you need it, you really need it.  The fact that it is a free, lightweight download which doesn't require an install to run is just added bonus.</p><h2>The DLL Problem</h2><p>We use a third-party DLL in our primary project at work which interacts with Progress.  The problem is on a fresh system install and run, you receive the following error:</p><img src=\"http://nbarger.files.wordpress.com/2011/04/dw-1.png\" alt=\"Could not load file or assembly or one of its dependencies\" /><p>The dreaded “Could not load file or assembly or one of its dependencies.”  The key here is the dependencies portion.  I know the Progress.ssl.dll exists and is in the right directory, it compiles correctly, but a dependency inside this DLL is affecting the runtime execution.</p><p>How do I know what the dependency is?</p><h2>Dependency Walker to the Rescue</h2><p>First, we need to download Dependency Walker – go here: <a href=\"http://dependencywalker.com\" target=\"_blank\">http://dependencywalker.com</a></p><img src=\"http://nbarger.files.wordpress.com/2011/04/dw-2.png\" alt=\"Download Dependency Walker\" /><p>Pick the appropriate version for your OS and take in the great retro-vibe of the website; it shows a little age doesn't it!</p><p>After the download, simply unzip it to any directory on your computer and run depends.exe.  Next, open the DLL that you are struggling with (Progress.ssl.dll in my case).</p><img src=\"http://nbarger.files.wordpress.com/2011/04/dw-3.png\" alt=\"Dependency Walker Inspect DLL\" /><p>Notice, the popup message and the yellow question marks next to DLL's which have potential problems.  In this particular case, MSVCR71.DLL is the culprit and needed to be copied into a directory in system path.</p><p>Here is another screenshot of the error for the DLL's:</p><img src=\"http://nbarger.files.wordpress.com/2011/04/dw-4.png\" alt=\"Dependency Walker Error Dependencies\" /><p>After you've attempted to resolve the issue (and this may be different each time based on the particular scenario), refresh Dependency Walker to see if the dependent DLL is corrected or simply try your .NET project again and see if it works properly.  In my case, MSVCR71.DLL was all that was needed and we were back on track.</p><p>If you have other “tried and true” tools that you still use today, please add them to the comments so we can keep them alive and maybe help a developer out!</p>"}