{"id":"things-to-do-on-a-rainy-day---create-visual-studio-code-snippets","title":"Things To Do On a Rainy Day - Create Visual Studio Code Snippets","description":"","link":"http://nicholasbarger.com/2008/08/21/things-to-do-on-a-rainy-day-create-visual-studio-code-snippets/","pubDate":"2008-08-21T18:24:58.000Z","content":"<img src=\"http://nbarger.files.wordpress.com/2010/01/snippet.gif\" alt=\"Code Snippets\" align=\"right\" /><p>I'd like to write a few blog posts sprinkled in regarding great features, practices, methodologies, and other goodies that are often overlooked when under the gun to develop a project, but by knowing about them, and occasionally executing them, you can actually save time, frustration, and produce much greater code.</p>    <p>Structured code snippets fall into the category of writing code for the purpose of writing better code.  The simple act of writing code that doesn't directly grow the project you are working on is why code snippets often aren't created.  In an ideal world however, I believe code snippets are an invaluable asset to maintain code consistency and reusability.</p>        <h2>Code Snippet Library</h2>    <p>Some programmers maintain code snippet libraries that they reuse for all of their projects.  There are a ton of advantages to this, but I do want to add a piece of advice.  If your company has it's own library share it amongst all of your developers so everyone begins writing code exactly the same way.  This increases the maintainability of code as well as helping in distribute work-load across employees.  If you work solo, my advice would be to create your own library.  Don't snag one from some site because 99/100 times I believe most developers don't use it.  If you create the code snippets yourself (and they're easy to do), then you are <b>much</b> more likely to remember to use them when the time comes (and what's the point in having it if you don't remember to use it).</p>        <h2>Project-specific Code Snippets</h2>    <p>Another great way to use code snippets is when creating a brand new project.  Distribute these code snippets to all developers working on this project and you will notice that your code will be much more consistent from the start.  Even if you are working by yourself, some times you have a tendency to slightly change or leave out pieces of code (especially at the wee hours in the morning, if you're like me).  Code snippets helps protect against this.</p>        <h2>An Example</h2>    <p>The following is a short example I use once in a while when writing class libraries.</p>        <div class=\"vb_block\">    <pre>&lt;CodeSnippets    xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"&gt;    &lt;CodeSnippet Format=\"1.0.0\"&gt;        &lt;Header&gt;          &lt;Title&gt;My Class Outline&lt;/Title&gt;          &lt;Author&gt;Nicholas Barger&lt;/Author&gt;          &lt;Description&gt;A basic outline of (nearly) every object class I create.&lt;/Description&gt;        &lt;/Header&gt;        &lt;Snippet&gt;          &lt;References&gt;              &lt;Reference&gt;                  &lt;Assembly&gt;System.Windows.Forms.dll&lt;/Assembly&gt;              &lt;/Reference&gt;          &lt;/References&gt;          &lt;Declarations&gt;            &lt;Literal&gt;              &lt;ID&gt;id&lt;/ID&gt;              &lt;ToolTip&gt;Unique ID&lt;/ToolTip&gt;              &lt;Default&gt;int&lt;/Default&gt;            &lt;/Literal&gt;            &lt;Literal&gt;              &lt;ID&gt;class&lt;/ID&gt;              &lt;ToolTip&gt;Name of the Class&lt;/ToolTip&gt;              &lt;Default&gt;classname&lt;/Default&gt;            &lt;/Literal&gt;          &lt;/Declarations&gt;          &lt;Code Language=\"CSharp\"&gt;              &lt;![CDATA[#region \"Internal Variables\"        #endregion        #region \"Properties\"        #endregion        #region \"Constructors\"        public $class$()        {            //scratch constructor        }        public $class$(int $id$)        {            LoadData($id$);        }        public void LoadData(int $id$)        {            //Load from DAL        }        #endregion]]&gt;            &lt;/Code&gt;        &lt;/Snippet&gt;    &lt;/CodeSnippet&gt;&lt;/CodeSnippets&gt;    </pre>    </div>        <p>The only thing to note here is that you want to begin writing your code snippet between the <i>...CDATA[</i> and <i>]</i> and to create declarations for areas which need to be filled in (denoted by the $id$ or $class$) - these are found in the &lt;Declarations /&gt; section.</p>    <p>There are of course more advanced things you can do with code snippets, but let's keep it basic for the sake of brevity (homework).</p>        <h2>How To Use Code Snippets</h2>    <p>Once you've created a code snippet just drop it into the appropriate directory, usually something like: <i>Visual Studio 2008\\Code Snippets\\Visual C#\\My Code Snippets</i> or similar.  Finally, within Visual Studio, go to an appropriate area such as a new class file in the above example and press Ctrl-K, Ctrl-X; you can now navigate through the dropdown menu of code snippets to find and execute your own.  Areas marked in green are your declarations and remind developers to change those values.</p>    <p>Hope this helps and gives you something to do before that next big project, or on a slow rainy day!</p>"}